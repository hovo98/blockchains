{"version":3,"file":"createServerRootMixin.js","sources":["../../../src/util/createServerRootMixin.js"],"sourcesContent":["import Vue from 'vue';\nimport instantsearch from 'instantsearch.js/es';\nimport { warn } from './warn';\n\nfunction walkIndex(indexWidget, visit) {\n  visit(indexWidget);\n\n  return indexWidget.getWidgets().forEach(widget => {\n    if (widget.$$type !== 'ais.index') return;\n    visit(widget);\n    walkIndex(widget, visit);\n  });\n}\n\nfunction renderToString(app, _renderToString) {\n  return new Promise((resolve, reject) =>\n    _renderToString(app, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    })\n  );\n}\n\nfunction searchOnlyWithDerivedHelpers(helper) {\n  return new Promise((resolve, reject) => {\n    helper.searchOnlyWithDerivedHelpers();\n\n    // we assume all derived helpers resolve at least in the same tick\n    helper.derivedHelpers[0].on('result', () => {\n      resolve();\n    });\n\n    helper.derivedHelpers.forEach(derivedHelper =>\n      derivedHelper.on('error', e => {\n        reject(e);\n      })\n    );\n  });\n}\n\nfunction defaultCloneComponent(componentInstance) {\n  const options = {\n    serverPrefetch: undefined,\n    fetch: undefined,\n    _base: undefined,\n    name: 'ais-ssr-root-component',\n    // copy over global Vue APIs\n    router: componentInstance.$router,\n    store: componentInstance.$store,\n  };\n\n  const Extended = componentInstance.$vnode\n    ? componentInstance.$vnode.componentOptions.Ctor.extend(options)\n    : Vue.component(\n        options.name,\n        Object.assign({}, componentInstance.$options, options)\n      );\n\n  const app = new Extended({\n    propsData: componentInstance.$options.propsData,\n  });\n\n  // https://stackoverflow.com/a/48195006/3185307\n  app.$slots = componentInstance.$slots;\n  app.$root = componentInstance.$root;\n  app.$options.serverPrefetch = [];\n\n  return app;\n}\n\nfunction augmentInstantSearch(instantSearchOptions, cloneComponent) {\n  const search = instantsearch(instantSearchOptions);\n\n  let initialResults;\n\n  /**\n   * main API for SSR, called in serverPrefetch of a root component which contains instantsearch\n   * @param {object} componentInstance the calling component's `this`\n   * @returns {Promise} result of the search, to save for .hydrate\n   */\n  search.findResultsState = function(componentInstance) {\n    let _renderToString;\n    try {\n      _renderToString = require('vue-server-renderer/basic');\n    } catch (e) {\n      // error is handled by regular if, in case it's `undefined`\n    }\n    if (!_renderToString) {\n      throw new Error('you need to install vue-server-renderer');\n    }\n\n    let app;\n    let instance;\n\n    return Promise.resolve()\n      .then(() => {\n        app = cloneComponent(componentInstance);\n\n        instance = app.instantsearch;\n\n        instance.start();\n        // although we use start for initializing the main index,\n        // we don't want to send search requests yet\n        instance.started = false;\n      })\n      .then(() => renderToString(app, _renderToString))\n      .then(() => searchOnlyWithDerivedHelpers(instance.mainHelper))\n      .then(() => {\n        initialResults = {};\n        walkIndex(instance.mainIndex, widget => {\n          const { _state, _rawResults } = widget.getResults();\n\n          initialResults[widget.getIndexId()] = {\n            // copy just the values of SearchParameters, not the functions\n            state: Object.keys(_state).reduce((acc, key) => {\n              // eslint-disable-next-line no-param-reassign\n              acc[key] = _state[key];\n              return acc;\n            }, {}),\n            results: _rawResults,\n          };\n        });\n\n        search.hydrate(initialResults);\n        return search.getState();\n      });\n  };\n\n  /**\n   * @returns {Promise} result state to serialize and enter into .hydrate\n   */\n  search.getState = function() {\n    if (!initialResults) {\n      throw new Error('You need to wait for findResultsState to finish');\n    }\n    return initialResults;\n  };\n\n  /**\n   * make sure correct data is available in each widget's state.\n   * called in widget mixin with (this.widget, this)\n   *\n   * @param {object} widget The widget instance\n   * @param {object} parent The local parent index\n   * @returns {void}\n   */\n  search.__forceRender = function(widget, parent) {\n    const results = parent.getResults();\n\n    // this happens when a different InstantSearch gets rendered initially,\n    // after the hydrate finished. There's thus no initial results available.\n    if (results === null) {\n      return;\n    }\n\n    const state = results._state;\n\n    const localHelper = parent.getHelper();\n    // helper gets created in init, but that means it doesn't get the injected\n    // parameters, because those are from the lastResults\n    localHelper.state = state;\n\n    widget.render({\n      helper: localHelper,\n      results,\n      scopedResults: parent.getScopedResults(),\n      parent,\n      state,\n      templatesConfig: {},\n      createURL: parent.createURL,\n      instantSearchInstance: search,\n      searchMetadata: {\n        isSearchStalled: false,\n      },\n    });\n  };\n\n  /**\n   * Called both in server\n   * @param {object} results a map of indexId: SearchResults\n   * @returns {void}\n   */\n  search.hydrate = function(results) {\n    if (!results) {\n      warn(\n        'The result of `findResultsState()` needs to be passed to `hydrate()`.'\n      );\n      return;\n    }\n\n    search._initialResults = results;\n\n    search.start();\n    search.started = false;\n  };\n  return search;\n}\n\nexport function createServerRootMixin(instantSearchOptions = {}) {\n  const { $cloneComponent = defaultCloneComponent } = instantSearchOptions;\n\n  const search = augmentInstantSearch(instantSearchOptions, $cloneComponent);\n\n  // put this in the user's root Vue instance\n  // we can then reuse that InstantSearch instance seamlessly from `ais-instant-search-ssr`\n  const rootMixin = {\n    provide() {\n      return {\n        $_ais_ssrInstantSearchInstance: this.instantsearch,\n      };\n    },\n    data() {\n      return {\n        // this is in data, so that the real & cloned render do not share\n        // the same instantsearch instance.\n        instantsearch: search,\n      };\n    },\n  };\n\n  return rootMixin;\n}\n"],"names":["defaultCloneComponent","componentInstance","const","options","serverPrefetch","undefined","fetch","_base","name","router","$router","store","$store","app","$vnode","componentOptions","Ctor","extend","Vue","component","Object","assign","$options","propsData","$slots","$root","augmentInstantSearch","instantSearchOptions","cloneComponent","initialResults","search","instantsearch","findResultsState","let","_renderToString","instance","require","e","Error","Promise","resolve","then","start","started","reject","err","res","renderToString","helper","mainHelper","searchOnlyWithDerivedHelpers","derivedHelpers","on","forEach","derivedHelper","walkIndex","indexWidget","visit","getWidgets","widget","$$type","mainIndex","getResults","getIndexId","state","keys","_state","reduce","acc","key","results","_rawResults","hydrate","getState","__forceRender","parent","localHelper","getHelper","render","scopedResults","getScopedResults","templatesConfig","createURL","instantSearchInstance","searchMetadata","isSearchStalled","_initialResults","warn","createServerRootMixin","$cloneComponent","provide","$_ais_ssrInstantSearchInstance","this","data"],"mappings":"uFAwCA,SAASA,EAAsBC,GAC7BC,IAAMC,EAAU,CACdC,oBAAgBC,EAChBC,WAAOD,EACPE,WAAOF,EACPG,KAAM,yBAENC,OAAQR,EAAkBS,QAC1BC,MAAOV,EAAkBW,QAUrBC,EAAM,IAPKZ,EAAkBa,OAC/Bb,EAAkBa,OAAOC,iBAAiBC,KAAKC,OAAOd,GACtDe,EAAIC,UACFhB,EAAQK,KACRY,OAAOC,OAAO,GAAIpB,EAAkBqB,SAAUnB,KAG3B,CACvBoB,UAAWtB,EAAkBqB,SAASC,YAQxC,OAJAV,EAAIW,OAASvB,EAAkBuB,OAC/BX,EAAIY,MAAQxB,EAAkBwB,MAC9BZ,EAAIS,SAASlB,eAAiB,GAEvBS,EAGT,SAASa,EAAqBC,EAAsBC,GAClD1B,IAEI2B,EAFEC,EAASC,EAAcJ,GA4H7B,OAnHAG,EAAOE,iBAAmB,SAAS/B,GACjCgC,IAAIC,EAUArB,EACAsB,EAVJ,IACED,EAAkBE,QAAQ,6BAC1B,MAAOC,IAGT,IAAKH,EACH,MAAM,IAAII,MAAM,2CAMlB,OAAOC,QAAQC,UACZC,gBACC5B,EAAMe,EAAe3B,IAErBkC,EAAWtB,EAAIkB,eAENW,QAGTP,EAASQ,SAAU,IAEpBF,uBA3FP,SAAwB5B,EAAKqB,GAC3B,OAAO,IAAIK,iBAASC,EAASI,UAC3BV,EAAgBrB,WAAMgC,EAAKC,GACrBD,GAAKD,EAAOC,GAChBL,EAAQM,OAuFIC,CAAelC,EAAKqB,KAC/BO,uBAnF+BO,EAmFSb,EAASc,WAlF/C,IAAIV,iBAASC,EAASI,GAC3BI,EAAOE,+BAGPF,EAAOG,eAAe,GAAGC,GAAG,oBAC1BZ,MAGFQ,EAAOG,eAAeE,iBAAQC,UAC5BA,EAAcF,GAAG,iBAASf,GACxBO,EAAOP,SAXf,IAAsCW,IAoF/BP,gBAiBC,OAhBAZ,EAAiB,GAxGzB,SAAS0B,EAAUC,EAAaC,GAG9B,OAFAA,EAAMD,GAECA,EAAYE,aAAaL,iBAAQM,GAChB,cAAlBA,EAAOC,SACXH,EAAME,GACNJ,EAAUI,EAAQF,MAmGdF,CAAUpB,EAAS0B,mBAAWF,GAC5B,MAAgCA,EAAOG,wCAEvCjC,EAAe8B,EAAOI,cAAgB,CAEpCC,MAAO5C,OAAO6C,KAAKC,GAAQC,gBAAQC,EAAKC,GAGtC,OADAD,EAAIC,GAAOH,EAAOG,GACXD,GACN,IACHE,QAASC,KAIbzC,EAAO0C,QAAQ3C,GACRC,EAAO2C,cAOpB3C,EAAO2C,SAAW,WAChB,IAAK5C,EACH,MAAM,IAAIS,MAAM,mDAElB,OAAOT,GAWTC,EAAO4C,cAAgB,SAASf,EAAQgB,GACtCzE,IAAMoE,EAAUK,EAAOb,aAIvB,GAAgB,OAAZQ,EAAJ,CAIApE,IAAM8D,EAAQM,EAAQJ,OAEhBU,EAAcD,EAAOE,YAG3BD,EAAYZ,MAAQA,EAEpBL,EAAOmB,OAAO,CACZ9B,OAAQ4B,UACRN,EACAS,cAAeJ,EAAOK,0BACtBL,QACAX,EACAiB,gBAAiB,GACjBC,UAAWP,EAAOO,UAClBC,sBAAuBrD,EACvBsD,eAAgB,CACdC,iBAAiB,OAUvBvD,EAAO0C,QAAU,SAASF,GACnBA,GAOLxC,EAAOwD,gBAAkBhB,EAEzBxC,EAAOY,QACPZ,EAAOa,SAAU,GATf4C,EACE,0EAUCzD,EAGF,SAAS0D,EAAsB7D,kBAAuB,IAC3D,uCAA0B3B,GAE1BE,IAAM4B,EAASJ,EAAqBC,EAAsB8D,GAmB1D,MAfkB,CAChBC,mBACE,MAAO,CACLC,+BAAgCC,KAAK7D,gBAGzC8D,gBACE,MAAO,CAGL9D,cAAeD"}