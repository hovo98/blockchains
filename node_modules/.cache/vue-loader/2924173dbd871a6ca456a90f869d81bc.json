{"remainingRequest":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\cosmos\\src\\components\\common\\TmField.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\cosmos\\src\\components\\common\\TmField.vue","mtime":1644920968000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import flatpickr from 'flatpickr'\n// import countries from \"./countries.json\"\nexport default {\n  name: \"tm-field\",\n  props: [\n    \"placeholder\",\n    \"type\",\n    \"size\",\n    \"value\",\n    \"theme\",\n    \"options\",\n    \"change\",\n    \"keyup\",\n    \"keydown\",\n    \"max\",\n    \"min\"\n  ],\n  computed: {\n    css() {\n      let value = \"tm-field\"\n      if (this.type === \"select\" || this.type === \"countries\") {\n        value += \" tm-field-select\"\n      }\n      if (this.type === \"toggle\") {\n        value += \" tm-field-toggle\"\n      }\n      if (this.size) value += ` tm-field-size-${this.size}`\n      if (this.theme) value += ` tm-field-theme-${this.theme}`\n      return value\n    },\n    toggleClass() {\n      return {\n        unchecked: !this.value\n      }\n    },\n    toggleLongerWord() {\n      return this.toggleOptions.checked.length >\n        this.toggleOptions.unchecked.length\n        ? this.toggleOptions.checked\n        : this.toggleOptions.unchecked\n    },\n    selectPlaceholder() {\n      if (this.placeholder) return this.placeholder\n      else return \"Select option...\"\n    },\n    toggleOptions() {\n      if (this.options && this.options.checked && this.options.unchecked)\n        return this.options\n      return {\n        checked: \"on\",\n        unchecked: \"off\"\n      }\n    }\n  },\n  data: () => ({\n    // countries: countries\n  }),\n  methods: {\n    toggle() {\n      this.value = !this.value\n    },\n    updateValue(value) {\n      let formattedValue = this.forceMinMax(value)\n      // so that the user can type in \"-\" and it isn't removed\n      if (formattedValue && this.$refs.numTextInput) {\n        // so the actual text box displays the correct number\n        this.$refs.numTextInput.value = formattedValue\n      }\n      // Emit the number value through the input event\n      this.$emit(\"input\", formattedValue)\n    },\n    onChange(...args) {\n      if (this.change) return this.change(...args)\n    },\n    onKeyup(...args) {\n      if (this.keyup) return this.keyup(...args)\n    },\n    onKeydown(...args) {\n      if (this.keydown) return this.keydown(...args)\n    },\n    forceMinMax(value) {\n      if (this.type !== \"number\") return value\n      value = value ? Number(value.trim()) : value\n      if (this.max && value > this.max) {\n        value = Number(this.max)\n      } else if (this.min && value && value < this.min) {\n        value = Number(this.min)\n      }\n      return value\n    }\n  },\n  mounted() {\n    let el = this.$el\n    if (this.type === \"number\") {\n      el.addEventListener(\"focus\", function() {\n        el.select()\n      })\n    }\n    /* if (this.type === 'datetime') {\n      this.picker = flatpickr(el, {\n        enableTime: true,\n        dateFormat: 'Y-m-d H:i',\n        onChange: (dateObj, dateStr) => this.updateValue(dateStr)\n      })\n      // console.log('its a datetime!', el)\n    } */\n  }\n}\n",{"version":3,"sources":["TmField.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"TmField.vue","sourceRoot":"src/components/common","sourcesContent":["<template lang=\"pug\">\n.tm-select(v-if=\"type === 'select' || type === 'countries'\")\n  select(\n    :class=\"css\"\n    :value=\"value\"\n    @input=\"updateValue($event.target.value)\"\n    @change=\"onChange\"\n    @keyup=\"onKeyup\"\n    @keydown=\"onKeydown\")\n    option(value=\"\" disabled selected hidden) {{ selectPlaceholder }}\n    option(v-if=\"options\" v-for=\"(option, index) in options\" :key=\"index\" :value=\"option.value\") {{ option.key }}\n    option(v-else-if=\"type === 'countries'\" v-for=\"i in countries\" :value=\"i.value\"\n    :key=\"i.key\") {{ i.key }}\n  .tm-field-select-addon: i.material-icons arrow_drop_down\n\n// .tm-datetime(v-else-if=\"type === 'datetime'\")\n  input(\n    type=\"text\"\n    :class=\"css\"\n    @change=\"onChange\"\n    @keyup=\"onKeyup\"\n    @keydown=\"onKeydown\"\n    :placeholder=\"placeholder\"\n    :value=\"value\"\n    @input=\"updateValue($event.target.value)\")\n\ntextarea(v-else-if=\"type === 'textarea'\"\n  :class=\"css\"\n  @change=\"onChange\"\n  @keyup=\"onKeyup\"\n  @keydown=\"onKeydown\"\n  :placeholder=\"placeholder\"\n  :value=\"value\"\n  @input=\"updateValue($event.target.value)\")\n\nlabel.tm-toggle(\n  v-else-if=\"type === 'toggle'\"\n  :class=\"toggleClass\")\n  .tm-toggle-wrapper\n    span {{toggleLongerWord}}\n    .toggle-option-checked: div {{toggleOptions.checked}}\n    .toggle-option-unchecked: div {{toggleOptions.unchecked}}\n    .toggle-handle\n    input(\n      type=\"checkbox\"\n      @change=\"onChange\"\n      :value=\"value\"\n    )\n\ninput(v-else\n  ref=\"numTextInput\"\n  :type=\"type\"\n  :class=\"css\"\n  @change=\"onChange\"\n  @keyup=\"onKeyup\"\n  @keydown=\"onKeydown\"\n  :placeholder=\"placeholder\"\n  :value=\"value\"\n  :max=\"max\"\n  :min=\"min\"\n  @input=\"updateValue($event.target.value)\")\n</template>\n\n<script>\n// import flatpickr from 'flatpickr'\n// import countries from \"./countries.json\"\nexport default {\n  name: \"tm-field\",\n  props: [\n    \"placeholder\",\n    \"type\",\n    \"size\",\n    \"value\",\n    \"theme\",\n    \"options\",\n    \"change\",\n    \"keyup\",\n    \"keydown\",\n    \"max\",\n    \"min\"\n  ],\n  computed: {\n    css() {\n      let value = \"tm-field\"\n      if (this.type === \"select\" || this.type === \"countries\") {\n        value += \" tm-field-select\"\n      }\n      if (this.type === \"toggle\") {\n        value += \" tm-field-toggle\"\n      }\n      if (this.size) value += ` tm-field-size-${this.size}`\n      if (this.theme) value += ` tm-field-theme-${this.theme}`\n      return value\n    },\n    toggleClass() {\n      return {\n        unchecked: !this.value\n      }\n    },\n    toggleLongerWord() {\n      return this.toggleOptions.checked.length >\n        this.toggleOptions.unchecked.length\n        ? this.toggleOptions.checked\n        : this.toggleOptions.unchecked\n    },\n    selectPlaceholder() {\n      if (this.placeholder) return this.placeholder\n      else return \"Select option...\"\n    },\n    toggleOptions() {\n      if (this.options && this.options.checked && this.options.unchecked)\n        return this.options\n      return {\n        checked: \"on\",\n        unchecked: \"off\"\n      }\n    }\n  },\n  data: () => ({\n    // countries: countries\n  }),\n  methods: {\n    toggle() {\n      this.value = !this.value\n    },\n    updateValue(value) {\n      let formattedValue = this.forceMinMax(value)\n      // so that the user can type in \"-\" and it isn't removed\n      if (formattedValue && this.$refs.numTextInput) {\n        // so the actual text box displays the correct number\n        this.$refs.numTextInput.value = formattedValue\n      }\n      // Emit the number value through the input event\n      this.$emit(\"input\", formattedValue)\n    },\n    onChange(...args) {\n      if (this.change) return this.change(...args)\n    },\n    onKeyup(...args) {\n      if (this.keyup) return this.keyup(...args)\n    },\n    onKeydown(...args) {\n      if (this.keydown) return this.keydown(...args)\n    },\n    forceMinMax(value) {\n      if (this.type !== \"number\") return value\n      value = value ? Number(value.trim()) : value\n      if (this.max && value > this.max) {\n        value = Number(this.max)\n      } else if (this.min && value && value < this.min) {\n        value = Number(this.min)\n      }\n      return value\n    }\n  },\n  mounted() {\n    let el = this.$el\n    if (this.type === \"number\") {\n      el.addEventListener(\"focus\", function() {\n        el.select()\n      })\n    }\n    /* if (this.type === 'datetime') {\n      this.picker = flatpickr(el, {\n        enableTime: true,\n        dateFormat: 'Y-m-d H:i',\n        onChange: (dateObj, dateStr) => this.updateValue(dateStr)\n      })\n      // console.log('its a datetime!', el)\n    } */\n  }\n}\n</script>\n\n<style lang=\"stylus\">\n@require '~variables'\n\n.tm-field\n  background var(--input-bg, #fff)\n  border 1px solid var(--input-bc, #ccc)\n  border-radius 0\n  color var(--txt, #333)\n  display block\n  font-size 16px\n  line-height 1.5rem\n  min-width 0\n  padding 0.1875rem 0.5rem\n  vertical-align top\n  width 100%\n  -webkit-appearance none\n\n.tm-field:disabled\n  background var(--app-fg, #eee)\n  border var(--app-fg, #eee)\n  box-shadow none\n  color var(--dim, #666)\n  text-shadow none\n\n.tm-field:focus\n  border 1px solid var(--link, #00f)\n  box-shadow none\n  outline none\n\ninput.tm-field\n  height 2rem\n\ntextarea.tm-field\n  height 4rem\n  resize vertical\n\n.tm-toggle\n  border 1px solid var(--input-bc, #ccc)\n  border-radius 1rem\n  height 2rem\n  padding 0 2px\n\n  *\n    cursor pointer\n\n  .tm-toggle-wrapper\n    margin-left calc((1.625rem / 2))\n    margin-right calc((1.625rem / 2))\n    padding 0 1.25rem\n    transform rotate(0deg)\n\n    &:before, &:after\n      content ''\n      height 1.625rem\n      position absolute\n      top 2px\n      width 1.625rem\n      z-index 0\n\n    &:before\n      background var(--success, #4acf4a)\n      border-radius 1em 0 0 1em\n      left calc((-1.625rem / 2))\n\n    &:after\n      background var(--danger, #8c8fa6)\n      border-radius 0 1em 1em 0\n      right calc((-1.625rem / 2))\n\n    .toggle-option-checked, .toggle-option-unchecked\n      clip rect(0, auto, auto, 0)\n      height 1.625rem\n      overflow hidden\n      position absolute\n      top 2px\n      transition width 500ms ease\n      z-index 1\n\n      > div\n        left 0\n        position fixed\n        text-align center\n        top 2px\n        width 100%\n\n    .toggle-option-checked\n      background var(--success, #4acf4a)\n      left 0\n      width 100%\n\n    .toggle-option-unchecked\n      background var(--danger, #8c8fa6)\n      right 0\n      width 0%\n\n    .toggle-handle\n      &:after\n        background var(--grey, #d4d5de)\n        border-radius 1rem\n        // display flex\n        // align-items center\n        // justify-content center\n        content ''\n        height 1.625rem\n        left auto\n        position absolute\n        right calc((-1.65rem / 2))\n        top 2px\n        transition right 500ms ease, left 500ms ease\n        width 1.625rem\n        z-index z(listItem)\n        // content 'drag_handle'\n        // font-size x\n        // font-family 'Material Icons'\n        // transform  rotate(90DEG)\n        // color var(--bc, hsl(233, 22%, 23%))\n\n    input[type='checkbox']\n      display none\n\n  &.unchecked\n    .toggle-option-checked\n      width 0\n\n    .toggle-option-unchecked\n      width 100%\n\n    .toggle-handle:after\n      right calc(100% - 0.75rem)\n\n.tm-select\n  position relative\n\n  select\n    appearance none\n    background var(--input-bg, #fff)\n    border-radius 0\n    color var(--txt, #333)\n    padding-right 2rem\n    width 100%\n\n    &:invalid\n      color dim\n\n    option\n      background var(--input-bg, #fff)\n      color txt\n      font-family var(--ff-brand)\n\n      &:checked\n        background var(--hover-bg, #ccf)\n        color var(--bright, #000)\n\n  .tm-field-select-addon\n    align-items center\n    background var(--input-bg, #fff)\n    border-left 1px solid var(--input-bc, #ccc)\n    box-sizing border-box\n    color var(--txt, #333)\n    display flex\n    height 2rem\n    justify-content center\n    pointer-events none\n    position absolute\n    right 0\n    text-align center\n    top 0\n    width 2rem\n\n/* ============================================================================== */\n.tm-datetime\n  position relative\n\n.tm-datetime:after\n  align-items center\n  background var(--app-bg, #fff)\n  border 1px solid var(--input-bc, #ccc)\n  box-sizing border-box\n  color var(--bright)\n  content '\\f073'\n  display flex\n  font-family FontAwesome\n  height 2rem\n  justify-content center\n  pointer-events none\n  position absolute\n  right 0\n  text-align center\n  top 0\n  width 2rem\n\n/* ============================================================================== */\n.input-group-addon\n  background var(--input-bg, #fff)\n  border 1px solid var(--input-bc, #ccc)\n  border-left none\n  color var(--txt, #333)\n  font-size 0.75rem\n  line-height 1.875rem\n  padding 0 0.5rem\n\n@media screen and (min-width: 360px)\n  .input-group-addon\n    font-size 1rem\n\n/* ============================================================================== */\n/* WebKit, Blink, Edge */\n.tm-field::-webkit-input-placeholder\n  color var(--dim, #666)\n\n/* Mozilla Firefox 4 to 18 */\n.tm-field:-moz-placeholder\n  color var(--dim, #666)\n  opacity 1\n\n/* Mozilla Firefox 19+ */\n.tm-field::-moz-placeholder\n  color var(--dim, #666)\n  opacity 1\n\n/* Internet Explorer 10-11 */\n.tm-field:-ms-input-placeholder\n  color var(--dim, #666)\n\n/* Standard (https//drafts.csswg.org/selectors-4/#placeholder) */\n.tm-field:placeholder-shown\n  color var(--dim, #666)\n\n/* ============================================================================== */\n/* sizes */\n.tm-field.tm-field-size-sm\n  font-size 0.75rem\n  height 1.5rem\n  padding-left 0.5rem\n  padding-right 0.5rem\n\n.tm-field.tm-field-size-lg\n  font-size 1.125rem\n  height 3rem\n  padding-left 0.75rem\n  padding-right 0.75rem\n\n/* ============================================================================== */\n/* tendermint styles */\n.tm-field.tm-field-theme-tendermint\n  background hsl(210, 70%, 18%)\n  border-color hsl(210, 70%, 38%)\n  color #fff\n\n.tm-field.tm-field-theme-tendermint:focus\n  border-color hsl(210, 70%, 43%)\n\n.tm-field.tm-field-theme-tendermint::-webkit-input-placeholder\n  color hsl(210, 70%, 70%)\n\n/* Mozilla Firefox 4 to 18 */\n.tm-field.tm-field-theme-tendermint:-moz-placeholder\n  color hsl(210, 70%, 70%)\n  opacity 1\n\n/* Mozilla Firefox 19+ */\n.tm-field.tm-field-theme-tendermint::-moz-placeholder\n  color hsl(210, 70%, 70%)\n  opacity 1\n\n/* Internet Explorer 10-11 */\n.tm-field.tm-field-theme-tendermint:-ms-input-placeholder\n  color hsl(210, 70%, 70%)\n\n/* Standard (https//drafts.csswg.org/selectors-4/#placeholder) */\n.tm-field.tm-field-theme-tendermint:placeholder-shown\n  color hsl(210, 70%, 70%)\n</style>\n"]}]}