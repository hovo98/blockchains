{"remainingRequest":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js!C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-markdown-loader\\lib\\markdown-compiler.js??ref--16-1!C:\\xampp\\htdocs\\cosmos\\content\\md\\whitepaper.md?vue&type=template&id=f496633e&","dependencies":[{"path":"C:\\xampp\\htdocs\\cosmos\\content\\md\\whitepaper.md","mtime":1644920968000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-markdown-loader\\lib\\markdown-compiler.js","mtime":1645112455562}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',[_c('h1',{attrs:{\"id\":\"cosmos\"}},[_vm._v(\"Cosmos\")]),_c('p',[_vm._v(\"A Network of Distributed Ledgers\")]),_c('p',[_vm._v(\"Jae Kwon \"),_c('a',{attrs:{\"href\":\"mailto:jae@tendermint.com\"}},[_vm._v(\"jae@tendermint.com\")]),_c('br'),_vm._v(\"\\nEthan Buchman \"),_c('a',{attrs:{\"href\":\"mailto:ethan@tendermint.com\"}},[_vm._v(\"ethan@tendermint.com\")])]),_c('p',[_vm._v(\"For discussions, \"),_c('a',{attrs:{\"href\":\"https://discord.gg/cosmosnetwork\"}},[_vm._v(\"join our developer chat\")]),_vm._v(\"!\")]),_c('p',[_c('em',[_vm._v(\"NOTE: If you can read this on GitHub, then we’re still actively developing this\\ndocument. Please check regularly for updates!\")])]),_c('p'),_c('div',{staticClass:\"minimal-toc\"},[_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#introduction\"}},[_vm._v(\"Introduction\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#tendermint\"}},[_vm._v(\"Tendermint\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#validators\"}},[_vm._v(\"Validators\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#consensus\"}},[_vm._v(\"Consensus\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#light-clients\"}},[_vm._v(\"Light Clients\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#preventing-attacks\"}},[_vm._v(\"Preventing Attacks\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#abci\"}},[_vm._v(\"ABCI\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#cosmos-overview\"}},[_vm._v(\"Cosmos Overview\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#tendermint-bft\"}},[_vm._v(\"Tendermint BFT\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#governance\"}},[_vm._v(\"Governance\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#the-hub-and-zones\"}},[_vm._v(\"The Hub and Zones\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#the-hub\"}},[_vm._v(\"The Hub\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#the-zones\"}},[_vm._v(\"The Zones\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#inter-blockchain-communication-ibc\"}},[_vm._v(\"Inter-blockchain Communication (IBC)\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#use-cases\"}},[_vm._v(\"Use Cases\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#distributed-exchange\"}},[_vm._v(\"Distributed Exchange\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#bridging-to-other-cryptocurrencies\"}},[_vm._v(\"Bridging to Other Cryptocurrencies\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#sending-tokens-to-the-cosmos-hub\"}},[_vm._v(\"Sending Tokens to the Cosmos Hub\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#withdrawing-tokens-from-cosmos-hub\"}},[_vm._v(\"Withdrawing Tokens from Cosmos Hub\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#total-accountability-of-bridge-zones\"}},[_vm._v(\"Total Accountability of Bridge Zones\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#ethereum-scaling\"}},[_vm._v(\"Ethereum Scaling\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#multi-application-integration\"}},[_vm._v(\"Multi-Application Integration\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#network-partition-mitigation\"}},[_vm._v(\"Network Partition Mitigation\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#federated-name-resolution-system\"}},[_vm._v(\"Federated Name Resolution System\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#issuance-and-incentives\"}},[_vm._v(\"Issuance and Incentives\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#the-atom-token\"}},[_vm._v(\"The Atom Token\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#fundraiser\"}},[_vm._v(\"Fundraiser\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#limitations-on-the-number-of-validators\"}},[_vm._v(\"Limitations on the Number of Validators\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#becoming-a-validator-after-genesis-day\"}},[_vm._v(\"Becoming a Validator After Genesis Day\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#penalties-for-validators\"}},[_vm._v(\"Penalties for Validators\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#transaction-fees\"}},[_vm._v(\"Transaction Fees\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#incentivizing-hackers\"}},[_vm._v(\"Incentivizing Hackers\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#governance-specification\"}},[_vm._v(\"Governance Specification\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#parameter-change-proposal\"}},[_vm._v(\"Parameter Change Proposal\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#bounty-proposal\"}},[_vm._v(\"Bounty Proposal\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#text-proposal\"}},[_vm._v(\"Text Proposal\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#roadmap\"}},[_vm._v(\"Roadmap\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#related-work\"}},[_vm._v(\"Related Work\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#consensus-systems\"}},[_vm._v(\"Consensus Systems\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#classic-byzantine-fault-tolerance\"}},[_vm._v(\"Classic Byzantine Fault Tolerance\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#bitshares-delegated-stake\"}},[_vm._v(\"BitShares delegated stake\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#stellar\"}},[_vm._v(\"Stellar\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#bitcoinng\"}},[_vm._v(\"BitcoinNG\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#casper\"}},[_vm._v(\"Casper\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#horizontal-scaling\"}},[_vm._v(\"Horizontal Scaling\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#interledger-protocol\"}},[_vm._v(\"Interledger Protocol\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#sidechains\"}},[_vm._v(\"Sidechains\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#ethereum-scalability-efforts\"}},[_vm._v(\"Ethereum Scalability Efforts\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#cosmos-vs-ethereum-20-mauve\"}},[_vm._v(\"Cosmos vs Ethereum 2.0 Mauve\")])])])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#general-scaling\"}},[_vm._v(\"General Scaling\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#lightning-network\"}},[_vm._v(\"Lightning Network\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#segregated-witness\"}},[_vm._v(\"Segregated Witness\")])])])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#appendix\"}},[_vm._v(\"Appendix\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#fork-accountability\"}},[_vm._v(\"Fork Accountability\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#tendermint-consensus\"}},[_vm._v(\"Tendermint Consensus\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#tendermint-light-clients\"}},[_vm._v(\"Tendermint Light Clients\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#preventing-long-range-attacks\"}},[_vm._v(\"Preventing Long Range Attacks\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#overcoming-forks-and-censorship-attacks\"}},[_vm._v(\"Overcoming Forks and Censorship Attacks\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#abci-specification\"}},[_vm._v(\"ABCI Specification\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#appendtx\"}},[_vm._v(\"AppendTx\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#checktx\"}},[_vm._v(\"CheckTx\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#commit\"}},[_vm._v(\"Commit\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#query\"}},[_vm._v(\"Query\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#flush\"}},[_vm._v(\"Flush\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#info\"}},[_vm._v(\"Info\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#setoption\"}},[_vm._v(\"SetOption\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#initchain\"}},[_vm._v(\"InitChain\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#beginblock\"}},[_vm._v(\"BeginBlock\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#endblock\"}},[_vm._v(\"EndBlock\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#ibc-packet-delivery-acknowledgement\"}},[_vm._v(\"IBC Packet Delivery Acknowledgement\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#merkle-tree-proof-specification\"}},[_vm._v(\"Merkle Tree & Proof Specification\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#simple-tree\"}},[_vm._v(\"Simple Tree\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#iavl-tree\"}},[_vm._v(\"IAVL+ Tree\")])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#transaction-types\"}},[_vm._v(\"Transaction Types\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#ibcblockcommittx\"}},[_vm._v(\"IBCBlockCommitTx\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#ibcpackettx\"}},[_vm._v(\"IBCPacketTx\")])])])])])]),_c('li',[_c('a',{attrs:{\"href\":\"#acknowledgements\"}},[_vm._v(\"Acknowledgements\")])]),_c('li',[_c('a',{attrs:{\"href\":\"#citations\"}},[_vm._v(\"Citations\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"#unsorted-links\"}},[_vm._v(\"Unsorted links\")])])])])])]),_c('p'),_c('h2',{attrs:{\"id\":\"introduction\"}},[_vm._v(\"Introduction\")]),_c('p',[_vm._v(\"The combined success of the open-source ecosystem, decentralized\\nfile-sharing, and public cryptocurrencies has inspired an understanding that\\ndecentralized internet protocols can be used to radically improve socio-economic\\ninfrastructure. We have seen specialized blockchain applications like Bitcoin\\n\"),_c('a',{attrs:{\"href\":\"https://bitcoin.org/bitcoin.pdf\"}},[_vm._v(\"[1]\")]),_vm._v(\" (a cryptocurrency), Zerocash \"),_c('a',{attrs:{\"href\":\"http://zerocash-project.org/paper\"}},[_vm._v(\"[2]\")]),_vm._v(\" (a cryptocurrency for\\nprivacy), and generalized smart contract platforms such as Ethereum \"),_c('a',{attrs:{\"href\":\"https://github.com/ethereum/wiki/wiki/White-Paper\"}},[_vm._v(\"[3]\")]),_vm._v(\",\\nwith countless distributed applications for the Ethereum Virtual Machine (EVM) such as Augur (a prediction\\nmarket) and TheDAO \"),_c('a',{attrs:{\"href\":\"https://download.slock.it/public/DAO/WhitePaper.pdf\"}},[_vm._v(\"[4]\")]),_vm._v(\" (an investment club).\")]),_c('p',[_vm._v(\"To date, however, these blockchains have suffered from a number of drawbacks,\\nincluding their gross energy inefficiency, poor or limited performance, and\\nimmature governance mechanisms. Proposals to scale\\nBitcoin’s transaction throughput, such as Segregated-Witness \"),_c('a',{attrs:{\"href\":\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\"}},[_vm._v(\"[5]\")]),_vm._v(\" and\\nBitcoinNG \"),_c('a',{attrs:{\"href\":\"https://arxiv.org/pdf/1510.02037v2.pdf\"}},[_vm._v(\"[6]\")]),_vm._v(\", are vertical scaling solutions that remain\\nlimited by the capacity of a single physical machine, in order to ensure the\\nproperty of complete auditability. The Lightning Network \"),_c('a',{attrs:{\"href\":\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\"}},[_vm._v(\"[7]\")]),_vm._v(\" can help\\nscale Bitcoin transaction volume by leaving some transactions off the ledger\\ncompletely, and is well suited for micropayments and privacy-preserving payment\\nrails, but may not be suitable for more generalized scaling needs.\")]),_c('p',[_vm._v(\"An ideal solution is one that allows multiple parallel blockchains to\\ninteroperate while retaining their security properties. This has proven\\ndifficult, if not impossible, with proof-of-work. Merged mining, for instance,\\nallows the work done to secure a parent chain to be reused on a child chain,\\nbut transactions must still be validated, in order, by each node, and a\\nmerge-mined blockchain is vulnerable to attack if a majority of the hashing\\npower on the parent is not actively merge-mining the child. An academic review\\nof \"),_c('a',{attrs:{\"href\":\"http://vukolic.com/iNetSec_2015.pdf\"}},[_vm._v(\"alternative blockchain network\\narchitectures\")]),_vm._v(\" is provided for additional\\ncontext, and we provide summaries of other proposals and their drawbacks in\\n\"),_c('a',{attrs:{\"href\":\"#related-work\"}},[_vm._v(\"Related Work\")]),_vm._v(\".\")]),_c('p',[_vm._v(\"Here we present Cosmos, a novel blockchain network architecture that addresses all\\nof these problems. Cosmos is a network of many independent blockchains, called\\nzones. The zones are powered by Tendermint BFT \"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/tendermint/wiki\"}},[_vm._v(\"[8]\")]),_vm._v(\", which provides a\\nhigh-performance, consistent, secure\\n\"),_c('a',{attrs:{\"href\":\"https://blog.cosmos.network/tendermint-vs-pbft-12e9f294c9ab\"}},[_vm._v(\"PBFT-like\")]),_vm._v(\" consensus engine,\\nwhere strict \"),_c('a',{attrs:{\"href\":\"#fork-accountability\"}},[_vm._v(\"fork-accountability\")]),_vm._v(\" guarantees hold over\\nthe behaviour of malicious actors. The Tendermint BFT consensus algorithm is\\nwell suited for scaling public proof-of-stake blockchains.\")]),_c('p',[_vm._v(\"The first zone on Cosmos is called the Cosmos Hub. The Cosmos Hub is a\\nmulti-asset proof-of-stake cryptocurrency with a simple governance mechanism\\nwhich enables the network to adapt and upgrade. In addition, the Cosmos Hub can be\\nextended by connecting other zones.\")]),_c('p',[_vm._v(\"The hub and zones of the Cosmos network communicate with each other via an\\ninter-blockchain communication (IBC) protocol, a kind of virtual UDP or TCP for\\nblockchains. Tokens can be transferred from one zone to another securely and\\nquickly without the need for exchange liquidity between zones. Instead, all\\ninter-zone token transfers go through the Cosmos Hub, which keeps track of the\\ntotal amount of tokens held by each zone. The hub isolates each zone from the\\nfailure of other zones. Because anyone can connect a new zone to the Cosmos Hub,\\nzones allow for future-compatibility with new blockchain innovations.\")]),_c('h2',{attrs:{\"id\":\"tendermint\"}},[_vm._v(\"Tendermint\")]),_c('p',[_vm._v(\"In this section we describe the Tendermint consensus protocol and the interface\\nused to build applications with it. For more details, see the \"),_c('a',{attrs:{\"href\":\"#appendix\"}},[_vm._v(\"appendix\")]),_vm._v(\".\")]),_c('h3',{attrs:{\"id\":\"validators\"}},[_vm._v(\"Validators\")]),_c('p',[_vm._v(\"In classical Byzantine fault-tolerant (BFT) algorithms, each node has the same\\nweight. In Tendermint, nodes have a non-negative amount of \"),_c('em',[_vm._v(\"voting power\")]),_vm._v(\", and\\nnodes that have positive voting power are called \"),_c('em',[_vm._v(\"validators\")]),_vm._v(\". Validators\\nparticipate in the consensus protocol by broadcasting cryptographic signatures,\\nor \"),_c('em',[_vm._v(\"votes\")]),_vm._v(\", to agree upon the next block.\")]),_c('p',[_vm._v(\"Validators’ voting powers are determined at genesis, or are changed\\ndeterministically by the blockchain, depending on the application. For example,\\nin a proof-of-stake application such as the Cosmos Hub, the voting power may be\\ndetermined by the amount of staking tokens bonded as collateral.\")]),_c('p',[_c('em',[_vm._v(\"NOTE: Fractions like ⅔ and ⅓ refer to fractions of the total voting power,\\nnever the total number of validators, unless all the validators have equal\\nweight. >⅔ means “more than ⅔”, ≥⅓ means “at least ⅓”.\")])]),_c('h3',{attrs:{\"id\":\"consensus\"}},[_vm._v(\"Consensus\")]),_c('p',[_vm._v(\"Tendermint is a partially synchronous BFT consensus protocol derived from the\\nDLS consensus algorithm \"),_c('a',{attrs:{\"href\":\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\"}},[_vm._v(\"[20]\")]),_vm._v(\". Tendermint is notable for its simplicity,\\nperformance, and \"),_c('a',{attrs:{\"href\":\"#fork-accountability\"}},[_vm._v(\"fork-accountability\")]),_vm._v(\". The protocol\\nrequires a fixed known set of validators, where each validator is identified by\\ntheir public key. Validators attempt to come to consensus on one block at a time,\\nwhere a block is a list of transactions. Voting for consensus on a block proceeds in\\nrounds. Each round has a round-leader, or proposer, who proposes a block. The\\nvalidators then vote, in stages, on whether to accept the proposed block\\nor move on to the next round. The proposer for a round is chosen\\ndeterministically from the ordered list of validators, in proportion to their\\nvoting power.\")]),_c('p',[_vm._v(\"The full details of the protocol are described\\n\"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm\"}},[_vm._v(\"here\")]),_vm._v(\".\")]),_c('p',[_vm._v(\"Tendermint’s security derives from its use of optimal Byzantine fault-tolerance\\nvia super-majority (>⅔) voting and a locking mechanism. Together, they ensure\\nthat:\")]),_c('ul',[_c('li',[_vm._v(\"≥⅓ voting power must be Byzantine to cause a violation of safety, where more\\nthan two values are committed.\")]),_c('li',[_vm._v(\"if any set of validators ever succeeds in violating safety, or even attempts\\nto do so, they can be identified by the protocol. This includes both voting\\nfor conflicting blocks and broadcasting unjustified votes.\")])]),_c('p',[_vm._v(\"Despite its strong guarantees, Tendermint provides exceptional performance. In\\nbenchmarks of 64 nodes distributed across 7 datacenters on 5 continents, on\\ncommodity cloud instances, Tendermint consensus can process thousands of\\ntransactions per second, with commit latencies on the order of one to two\\nseconds. Notably, performance of well over a thousand transactions per second\\nis maintained even in harsh adversarial conditions, with validators crashing or\\nbroadcasting maliciously crafted votes. See the figure below for details.\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png\",\"alt\":\"Figure of Tendermint throughput performance\"}})]),_c('h3',{attrs:{\"id\":\"light-clients\"}},[_vm._v(\"Light Clients\")]),_c('p',[_vm._v(\"A major benefit of Tendermint’s consensus algorithm is simplified light client\\nsecurity, making it an ideal candidate for mobile and internet-of-things use\\ncases. While a Bitcoin light client must sync chains of block headers and find\\nthe one with the most proof of work, Tendermint light clients need only to keep\\nup with changes to the validator set, and then verify the >⅔ PreCommits\\nin the latest block to determine the latest state.\")]),_c('p',[_vm._v(\"Succinct light client proofs also enable \"),_c('a',{attrs:{\"href\":\"#inter-blockchain-communication-ibc\"}},[_vm._v(\"inter-blockchain\\ncommunication\")]),_vm._v(\".\")]),_c('h3',{attrs:{\"id\":\"preventing-attacks\"}},[_vm._v(\"Preventing Attacks\")]),_c('p',[_vm._v(\"Tendermint has protective measures for preventing certain notable\\nattacks, like \"),_c('a',{attrs:{\"href\":\"#preventing-long-range-attacks\"}},[_vm._v(\"long-range-nothing-at-stake double\\nspends\")]),_vm._v(\" and\\n\"),_c('a',{attrs:{\"href\":\"#overcoming-forks-and-censorship-attacks\"}},[_vm._v(\"censorship\")]),_vm._v(\". These are discussed more\\nfully in the \"),_c('a',{attrs:{\"href\":\"#appendix\"}},[_vm._v(\"appendix\")]),_vm._v(\".\")]),_c('h3',{attrs:{\"id\":\"abci\"}},[_vm._v(\"ABCI\")]),_c('p',[_vm._v(\"The Tendermint consensus algorithm is implemented in a program called Tendermint\\nCore. Tendermint BFT is an application-agnostic “consensus engine” that can\\nturn any deterministic blackbox application into a distributedly replicated\\nblockchain. Tendermint BFT connects to blockchain\\napplications via the Application Blockchain Interface (ABCI) \"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/abci\"}},[_vm._v(\"[17]\")]),_vm._v(\". ABCI\\nis an interface that defines the boundary between the replication engine (the\\nblockchain), and the state machine (the application). By using a socket protocol,\\nwe enable a consensus engine running in one process to manage an application\\nstate running in another. Thus, the ABCI allows for blockchain applications to be\\nprogrammed in any language, not just the programming language that the consensus\\nengine is written in. Additionally, the ABCI makes it possible to easily swap out\\nthe consensus layer of any existing blockchain stack.\")]),_c('p',[_vm._v(\"We draw an analogy with the well-known cryptocurrency Bitcoin. Bitcoin is a\\ncryptocurrency blockchain where each node maintains a fully audited Unspent\\nTransaction Output (UTXO) database. If one wanted to create a Bitcoin-like\\nsystem on top of ABCI, Tendermint BFT would be responsible for\")]),_c('ul',[_c('li',[_vm._v(\"Sharing blocks and transactions between nodes\")]),_c('li',[_vm._v(\"Establishing a canonical/immutable order of transactions (the blockchain)\")])]),_c('p',[_vm._v(\"Meanwhile, the ABCI application would be responsible for\")]),_c('ul',[_c('li',[_vm._v(\"Maintaining the UTXO database\")]),_c('li',[_vm._v(\"Validating cryptographic signatures of transactions\")]),_c('li',[_vm._v(\"Preventing transactions from spending non-existent funds\")]),_c('li',[_vm._v(\"Allowing clients to query the UTXO database\")])]),_c('p',[_vm._v(\"Tendermint is able to decompose the blockchain design by offering a very simple\\nAPI between the application process and consensus process.\")]),_c('h2',{attrs:{\"id\":\"cosmos-overview\"}},[_vm._v(\"Cosmos Overview\")]),_c('p',[_vm._v(\"Cosmos is a network of independent parallel blockchains that are each powered by\\nclassical BFT consensus algorithms like Tendermint\\n\"),_c('a',{attrs:{\"href\":\"http://github.com/tendermint/tendermint\"}},[_vm._v(\"1\")]),_vm._v(\".\")]),_c('p',[_vm._v(\"The first blockchain in this network will be the Cosmos Hub. The Cosmos Hub\\nconnects to many other blockchains (or \"),_c('em',[_vm._v(\"zones\")]),_vm._v(\") via a novel inter-blockchain\\ncommunication protocol. The Cosmos Hub tracks numerous token types and keeps\\nrecord of the total number of tokens in each connected zone. Tokens can be\\ntransferred from one zone to another securely and quickly without the need for\\na liquid exchange between zones, because all inter-zone coin transfers go\\nthrough the Cosmos Hub.\")]),_c('p',[_vm._v(\"This architecture solves many problems that the blockchain space faces today,\\nsuch as application interoperability, scalability, and seamless upgradability.\\nFor example, zones derived from Bitcoind, Go-Ethereum, CryptoNote, ZCash, or any\\nblockchain system can be plugged into the Cosmos Hub. These zones allow Cosmos\\nto scale infinitely to meet global transaction demand. Zones are also a great\\nfit for a distributed exchange, which will be supported as well.\")]),_c('p',[_vm._v(\"Cosmos is not just a single distributed ledger, and the Cosmos Hub isn’t a\\nwalled garden or the center of its universe. We are designing a protocol for\\nan open network of distributed ledgers that can serve as a new foundation for\\nfuture financial systems, based on principles of cryptography, sound economics,\\nconsensus theory, transparency, and accountability.\")]),_c('h3',{attrs:{\"id\":\"tendermint-bft\"}},[_vm._v(\"Tendermint BFT\")]),_c('p',[_vm._v(\"The Cosmos Hub is the first public blockchain in the Cosmos Network, powered by the\\nTendermint BFT consensus algorithm. The Tendermint open-source project was\\nborn in 2014 to address the speed, scalability, and environmental issues of\\nBitcoin’s proof-of-work consensus algorithm. By using and improving upon\\nproven BFT algorithms developed at MIT in 1988 \"),_c('a',{attrs:{\"href\":\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\"}},[_vm._v(\"[20]\")]),_vm._v(\", the Tendermint\\nteam was the first to conceptually demonstrate a proof-of-stake cryptocurrency\\nthat addresses the nothing-at-stake problem suffered by first-generation\\nproof-of-stake cryptocurrencies such as NXT and BitShares1.0.\")]),_c('p',[_vm._v(\"Today, practically all Bitcoin mobile wallets use trusted servers to provide\\nthem with transaction verification. This is because proof-of-work requires\\nwaiting for many confirmations before a transaction can be considered\\nirreversibly committed. Double-spend attacks have already been demonstrated on\\nservices like CoinBase.\")]),_c('p',[_vm._v(\"Unlike other blockchain consensus systems, Tendermint offers instant and\\nprovably secure mobile-client payment verification. Since the Tendermint is\\ndesigned to never fork at all, mobile wallets can receive instant transaction\\nconfirmation, which makes trustless and practical payments a reality on\\nsmartphones. This has significant ramifications for Internet of Things applications as well.\")]),_c('p',[_vm._v(\"Validators in Cosmos have a similar role to Bitcoin miners, but instead use\\ncryptographic signatures to vote. Validators are secure, dedicated machines\\nthat are responsible for committing blocks. Non-validators can delegate their\\nstaking tokens (called “atoms”) to any validator to earn a portion of block fees\\nand atom rewards, but they incur the risk of getting punished (slashed) if the\\ndelegate validator gets hacked or violates the protocol. The proven safety\\nguarantees of Tendermint BFT consensus, and the collateral deposit of\\nstakeholders–validators and delegators–provide provable, quantifiable\\nsecurity for nodes and light clients.\")]),_c('h3',{attrs:{\"id\":\"governance\"}},[_vm._v(\"Governance\")]),_c('p',[_vm._v(\"Distributed public ledgers should have a constitution and a governance system.\\nBitcoin relies on the Bitcoin Foundation and mining to\\ncoordinate upgrades, but this is a slow process. Ethereum split into ETH and\\nETC after hard-forking to address TheDAO hack, largely because there was no\\nprior social contract nor mechanism for making such decisions.\")]),_c('p',[_vm._v(\"Validators and delegators on the Cosmos Hub can vote on proposals that can\\nchange preset parameters of the system automatically (such as the block gas\\nlimit), coordinate upgrades, as well as vote on amendments to the human-readable\\nconstitution that govern the policies of the Cosmos Hub. The constitution\\nallows for cohesion among the stakeholders on issues such as theft\\nand bugs (such as TheDAO incident), allowing for quicker and cleaner resolution.\")]),_c('p',[_vm._v(\"Each zone can also have their own constitution and governance mechanism as well.\\nFor example, the Cosmos Hub could have a constitution that enforces immutability\\nat the Hub (no roll-backs, save for bugs of the Cosmos Hub node implementation),\\nwhile each zone can set their own policies regarding roll-backs.\")]),_c('p',[_vm._v(\"By enabling interoperability among differing policy zones, the Cosmos network\\ngives its users ultimate freedom and potential for permissionless\\nexperimentation.\")]),_c('h2',{attrs:{\"id\":\"the-hub-and-zones\"}},[_vm._v(\"The Hub and Zones\")]),_c('p',[_vm._v(\"Here we describe a novel model of decentralization and scalability. Cosmos is a\\nnetwork of many blockchains powered by Tendermint. While existing proposals aim\\nto create a “single blockchain” with total global transaction ordering, Cosmos\\npermits many blockchains to run concurrently with one another while retaining\\ninteroperability.\")]),_c('p',[_vm._v(\"At the basis, the Cosmos Hub manages many independent blockchains called “zones”\\n(sometimes referred to as “shards”, in reference to the database scaling\\ntechnique known as “sharding”). A constant stream of recent block commits from\\nzones posted on the Hub allows the Hub to keep up with the state of each zone.\\nLikewise, each zone keeps up with the state of the Hub (but zones do not keep up\\nwith each other except indirectly through the Hub). Packets of information are\\nthen communicated from one zone to another by posting Merkle-proofs as evidence\\nthat the information was sent and received. This mechanism is called\\ninter-blockchain communication, or IBC for short.\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/hub_and_zones.png\",\"alt\":\"Figure of hub and zonesacknowledgement\"}})]),_c('p',[_vm._v(\"Any of the zones can themselves be hubs to form an acyclic graph, but\\nfor the sake of clarity we will only describe the simple configuration where\\nthere is only one hub, and many non-hub zones.\")]),_c('h3',{attrs:{\"id\":\"the-hub\"}},[_vm._v(\"The Hub\")]),_c('p',[_vm._v(\"The Cosmos Hub is a blockchain that hosts a multi-asset distributed ledger,\\nwhere tokens can be held by individual users or by zones themselves. These\\ntokens can be moved from one zone to another in a special IBC packet called a\\n“coin packet”. The hub is responsible for preserving the global invariance of\\nthe total amount of each token across the zones. IBC coin packet transactions\\nmust be committed by the sender, hub, and receiver blockchains.\")]),_c('p',[_vm._v(\"Since the Cosmos Hub acts as the central ledger for the whole\\nsystem, the security of the Hub is of paramount importance. While each\\nzone may be a Tendermint blockchain that is secured by as few as 4 (or even\\nless if BFT consensus is not needed), the Hub must be secured by a globally\\ndecentralized set of validators that can withstand the most severe attack\\nscenarios, such as a continental network partition or a nation-state sponsored\\nattack.\")]),_c('h3',{attrs:{\"id\":\"the-zones\"}},[_vm._v(\"The Zones\")]),_c('p',[_vm._v(\"A Cosmos zone is an independent blockchain that exchanges IBC messages with the\\nHub. From the Hub’s perspective, a zone is a multi-asset dynamic-membership\\nmulti-signature account that can send and receive tokens using IBC packets. Like\\na cryptocurrency account, a zone cannot transfer more tokens than it has, but\\ncan receive tokens from others who have them. A zone may be designated as an\\n“source” of one or more token types, granting it the power to inflate that token\\nsupply.\")]),_c('p',[_vm._v(\"Atoms of the Cosmos Hub may be staked by validators of a zone connected to the\\nHub. While double-spend attacks on these zones would result in the slashing of\\natoms with Tendermint’s fork-accountability, a zone where >⅔ of the voting power\\nare Byzantine can commit invalid state. The Cosmos Hub does not verify or\\nexecute transactions committed on other zones, so it is the responsibility of\\nusers to send tokens to zones that they trust. In the future, the Cosmos Hub’s\\ngovernance system may pass Hub improvement proposals that account for zone\\nfailures. For example, outbound token transfers from some (or all) zones may be\\nthrottled to allow for the emergency circuit-breaking of zones (a temporary halt\\nof token transfers) when an attack is detected.\")]),_c('h2',{attrs:{\"id\":\"inter-blockchain-communication-ibc\"}},[_vm._v(\"Inter-blockchain Communication (IBC)\")]),_c('p',[_vm._v(\"Now we look at how the Hub and zones communicate with each other. For example, if\\nthere are three blockchains, “Zone1”, “Zone2”, and “Hub”, and we wish for\\n“Zone1” to produce a packet destined for “Zone2” going through “Hub”. To move a\\npacket from one blockchain to another, a proof is posted on the\\nreceiving chain. The proof states that the sending chain published a packet for the alleged\\ndestination. For the receiving chain to check this proof, it must be able keep\\nup with the sender’s block headers. This mechanism is similar to that used by\\nsidechains, which requires two interacting chains to be aware of one another via a\\nbidirectional stream of proof-of-existence datagrams (transactions).\")]),_c('p',[_vm._v(\"The IBC protocol can naturally be defined using two types of transactions: an\\n\"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommitTx\")]),_vm._v(\" transaction, which allows a blockchain to prove to any\\nobserver of its most recent block-hash, and an \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" transaction, which\\nallows a blockchain to prove to any observer that the given packet was indeed\\npublished by the sender’s application, via a Merkle-proof to the recent\\nblock-hash.\")]),_c('p',[_vm._v(\"By splitting the IBC mechanics into two separate transactions, we allow the\\nnative fee market-mechanism of the receiving chain to determine which packets\\nget committed (i.e. acknowledged), while allowing for complete freedom on the\\nsending chain as to how many outbound packets are allowed.\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_without_ack.png\",\"alt\":\"Figure of Zone1, Zone2, and Hub IBC withoutacknowledgement\"}})]),_c('p',[_vm._v(\"In the example above, in order to update the block-hash of\\n“Zone1” on “Hub” (or of “Hub” on “Zone2”), an \"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommitTx\")]),_vm._v(\"\\ntransaction must be posted on “Hub” with the block-hash of “Zone1” (or on\\n“Zone2” with the block-hash of “Hub”).\")]),_c('p',[_c('em',[_vm._v(\"See \"),_c('a',{attrs:{\"href\":\"#ibcblockcommittx\"}},[_vm._v(\"IBCBlockCommitTx\")]),_vm._v(\" and \"),_c('a',{attrs:{\"href\":\"#ibcpacketcommit\"}},[_vm._v(\"IBCPacketTx\")]),_vm._v(\"\\nfor for more information on the two IBC transaction types.\")])]),_c('h2',{attrs:{\"id\":\"use-cases\"}},[_vm._v(\"Use Cases\")]),_c('h3',{attrs:{\"id\":\"distributed-exchange\"}},[_vm._v(\"Distributed Exchange\")]),_c('p',[_vm._v(\"In the same way that Bitcoin is more secure by being a distributed,\\nmass-replicated ledger, we can make exchanges less vulnerable to external and\\ninternal hacks by running it on the blockchain. We call this a distributed\\nexchange.\")]),_c('p',[_vm._v(\"What the cryptocurrency community calls a decentralized exchange today are\\nbased on something called “atomic cross-chain” (AXC) transactions. With an AXC\\ntransaction, two users on two different chains can make two transfer\\ntransactions that are committed together on both ledgers, or none at all (i.e.\\natomically). For example, two users can trade bitcoins for ether (or any two\\ntokens on two different ledgers) using AXC transactions, even though Bitcoin\\nand Ethereum are not connected to each other. The benefit of running an\\nexchange on AXC transactions is that neither users need to trust each other or\\nthe trade-matching service. The downside is that both parties need to be\\nonline for the trade to occur.\")]),_c('p',[_vm._v(\"Another type of decentralized exchange is a mass-replicated distributed\\nexchange that runs on its own blockchain. Users on this kind of exchange can\\nsubmit a limit order and turn their computer off, and the trade can execute\\nwithout the user being online. The blockchain matches and completes the trade\\non behalf of the trader.\")]),_c('p',[_vm._v(\"A centralized exchange can create a deep orderbook of limit orders and thereby\\nattract more traders. Liquidity begets more liquidity in the exchange world,\\nand so there is a strong network effect (or at least a winner-take-most effect)\\nin the exchange business. The current leader for cryptocurrency exchanges\\ntoday is Poloniex with a 24-hour volume of $20M, and in second place is\\nBitfinex with a 24-hour volume of $5M. Given such strong network effects, it\\nis unlikely for AXC-based decentralized exchanges to win volume over the\\ncentralized exchanges. For a decentralized exchange to compete with a\\ncentralized exchange, it would need to support deep orderbooks with limit\\norders. Only a distributed exchange on a blockchain can provide that.\")]),_c('p',[_vm._v(\"Tendermint provides additional benefits of faster transaction commits. By\\nprioritizing fast finality without sacrificing consistency, zones in Cosmos can\\nfinalize transactions fast – for both exchange order transactions as well as\\nIBC token transfers to and from other zones.\")]),_c('p',[_vm._v(\"Given the state of cryptocurrency exchanges today, a great application for\\nCosmos is the distributed exchange (aka the Cosmos DEX). The transaction\\nthroughput capacity as well as commit latency can be comparable to those of\\ncentralized exchanges. Traders can submit limit orders that can be executed\\nwithout both parties having to be online. And with Tendermint, the Cosmos hub,\\nand IBC, traders can move funds in and out of the exchange to and from other\\nzones with speed.\")]),_c('h3',{attrs:{\"id\":\"bridging-to-other-cryptocurrencies\"}},[_vm._v(\"Bridging to Other Cryptocurrencies\")]),_c('p',[_vm._v(\"A privileged zone can act as the source of a bridged token of another\\ncryptocurrency. A bridge is similar to the relationship between a\\nCosmos hub and zone; both must keep up with the latest blocks of the\\nother in order to verify proofs that tokens have moved from one to the other. A\\n“bridge-zone” on the Cosmos network keeps up with the Hub as well as the\\nother cryptocurrency. The indirection through the bridge-zone allows the logic of\\nthe Hub to remain simple and agnostic to other blockchain consensus strategies\\nsuch as Bitcoin’s proof-of-work mining.\")]),_c('h4',{attrs:{\"id\":\"sending-tokens-to-the-cosmos-hub\"}},[_vm._v(\"Sending Tokens to the Cosmos Hub\")]),_c('p',[_vm._v(\"Each bridge-zone validator would run a Tendermint-powered blockchain with a special\\nABCI bridge-app, but also a full-node of the “origin” blockchain.\")]),_c('p',[_vm._v(\"When new blocks are mined on the origin, the bridge-zone validators will come\\nto agreement on committed blocks by signing and sharing their respective local\\nview of the origin’s blockchain tip. When a bridge-zone receives payment on the\\norigin (and sufficient confirmations were agreed to have been seen in the case\\nof a PoW chain such as Ethereum or Bitcoin), a corresponding account is created\\non the bridge-zone with that balance.\")]),_c('p',[_vm._v(\"In the case of Ethereum, the bridge-zone can share the same validator-set as the\\nCosmos Hub. On the Ethereum side (the origin), a bridge-contract would allow\\nether holders to send ether to the bridge-zone by sending it to the bridge-contract\\non Ethereum. Once ether is received by the bridge-contract, the ether cannot be\\nwithdrawn unless an appropriate IBC packet is received by the bridge-contract from\\nthe bridge-zone. The bridge-contract tracks the validator-set of the bridge-zone, which\\nmay be identical to the Cosmos Hub’s validator-set.\")]),_c('p',[_vm._v(\"In the case of Bitcoin, the concept is similar except that instead of a single\\nbridge-contract, each UTXO would be controlled by a threshold multisignature P2SH\\npubscript. Due to the limitations of the P2SH system, the signers cannot be\\nidentical to the Cosmos Hub validator-set.\")]),_c('h4',{attrs:{\"id\":\"withdrawing-tokens-from-cosmos-hub\"}},[_vm._v(\"Withdrawing Tokens from Cosmos Hub\")]),_c('p',[_vm._v(\"Ether on the bridge-zone (“bridged-ether”) can be transferred to and from the\\nHub, and later be destroyed with a transaction that sends it to a particular\\nwithdrawal address on Ethereum. An IBC packet proving that the transaction\\noccurred on the bridge-zone can be posted to the Ethereum bridge-contract to\\nallow the ether to be withdrawn.\")]),_c('p',[_vm._v(\"In the case of Bitcoin, the restricted scripting system makes it difficult to\\nmirror the IBC coin-transfer mechanism. Each UTXO has its own independent\\npubscript, so every UTXO must be migrated to a new UTXO when there is a change\\nin the set of Bitcoin escrow signers. One solution is to compress and\\ndecompress the UTXO-set as necessary to keep the total number of UTXOs down.\")]),_c('h4',{attrs:{\"id\":\"total-accountability-of-bridge-zones\"}},[_vm._v(\"Total Accountability of Bridge Zones\")]),_c('p',[_vm._v(\"The risk of such a bridgeging contract is a rogue validator set. ≥⅓ Byzantine\\nvoting power could cause a fork, withdrawing ether from the bridge-contract on\\nEthereum while keeping the bridged-ether on the bridge-zone. Worse, >⅔ Byzantine\\nvoting power can steal ether outright from those who sent it to the\\nbridge-contract by deviating from the original bridgeging logic of the bridge-zone.\")]),_c('p',[_vm._v(\"It is possible to address these issues by designing the bridge to be totally\\naccountable. For example, all IBC packets, from the hub and the origin, might\\nrequire acknowledgement by the bridge-zone in such a way that all state\\ntransitions of the bridge-zone can be efficiently challenged and verified by\\neither the hub or the origin’s bridge-contract. The Hub and the origin should\\nallow the bridge-zone validators to post collateral, and token transfers out of\\nthe bridge-contract should be delayed (and collateral unbonding period\\nsufficiently long) to allow for any challenges to be made by independent\\nauditors. We leave the design of the specification and implementation of this\\nsystem open as a future Cosmos improvement proposal, to be passed by the Cosmos\\nHub’s governance system.\")]),_c('h3',{attrs:{\"id\":\"ethereum-scaling\"}},[_vm._v(\"Ethereum Scaling\")]),_c('p',[_vm._v(\"Solving the scaling problem is an open issue for Ethereum. Currently,\\nEthereum nodes process every single transaction and also store all the states.\\n\"),_c('a',{attrs:{\"href\":\"https://docs.google.com/presentation/d/1CjD0W4l4-CwHKUvfF5Vlps76fKLEC6pIwu1a_kC_YRQ/mobilepresent?slide=id.gd284b9333_0_28\"}},[_vm._v(\"link\")]),_vm._v(\".\")]),_c('p',[_vm._v(\"Since Tendermint can commit blocks much faster than Ethereum’s proof-of-work,\\nEVM zones powered by Tendermint consensus and operating on bridged-ether can\\nprovide higher performance to Ethereum blockchains. Additionally, though the\\nCosmos Hub and IBC packet mechanics does not allow for arbitrary contract logic\\nexecution per se, it can be used to coordinate token movements between Ethereum\\ncontracts running on different zones, providing a foundation for token-centric\\nEthereum scaling via sharding.\")]),_c('h3',{attrs:{\"id\":\"multi-application-integration\"}},[_vm._v(\"Multi-Application Integration\")]),_c('p',[_vm._v(\"Cosmos zones run arbitrary application logic, which is defined at the beginning of the\\nzone’s life and can potentially be updated over time by governance. Such flexibility\\nallows Cosmos zones to act as bridges to other cryptocurrencies such as Ethereum or\\nBitcoin, and it also permits derivatives of those blockchains, utilizing the\\nsame codebase but with a different validator set and initial distribution. This\\nallows many existing cryptocurrency frameworks, such as those of Ethereum,\\nZerocash, Bitcoin, CryptoNote and so on, to be used with Tendermint BFT,\\nwhich is a higher performance consensus engine, on a common network, opening tremendous\\nopportunity for interoperability across platforms. Furthermore, as a\\nmulti-asset blockchain, a single transaction may contain multiple inputs and\\noutputs, where each input can be any token type, enabling Cosmos to serve\\ndirectly as a platform for decentralized exchange, though orders are assumed to\\nbe matched via other platforms. Alternatively, a zone can serve as a distributed\\nfault-tolerant exchange (with orderbooks), which can be a strict improvement\\nover existing centralized cryptocurrency exchanges which tend to get hacked over\\ntime.\")]),_c('p',[_vm._v(\"Zones can also serve as blockchain-backed versions of enterprise and government\\nsystems, where pieces of a particular service that are traditionally run by an\\norganization or group of organizations are instead run as a ABCI application on\\na certain zone, which allows it to inherit the security and interoperability of the\\npublic Cosmos network without sacrificing control over the underlying service.\\nThus, Cosmos may offer the best of both worlds for organizations looking to\\nutilize blockchain technology but who are wary of relinquishing control completely\\nto a distributed third party.\")]),_c('h3',{attrs:{\"id\":\"network-partition-mitigation\"}},[_vm._v(\"Network Partition Mitigation\")]),_c('p',[_vm._v(\"Some claim that a major problem with consistency-favouring consensus algorithms\\nlike Tendermint is that any network partition which causes there to be no single\\npartition with >⅔ voting power (e.g. ≥⅓ going offline) will halt consensus\\naltogether. The Cosmos architecture can help mitigate this problem by using a global\\nhub with regional autonomous zones, where voting power for each zone are\\ndistributed based on a common geographic region. For instance, a common\\nparadigm may be for individual cities, or regions, to operate their own zones\\nwhile sharing a common hub (e.g. the Cosmos Hub), enabling municipal activity to\\npersist in the event that the hub halts due to a temporary network partition.\\nNote that this allows real geological, political, and network-topological\\nfeatures to be considered in designing robust federated fault-tolerant systems.\")]),_c('h3',{attrs:{\"id\":\"federated-name-resolution-system\"}},[_vm._v(\"Federated Name Resolution System\")]),_c('p',[_vm._v(\"NameCoin was one of the first blockchains to attempt to solve the\\nname-resolution problem by adapting the Bitcoin blockchain. Unfortunately there\\nhave been several issues with this approach.\")]),_c('p',[_vm._v(\"With Namecoin, we can verify that, for example, \"),_c('em',[_vm._v(\"@satoshi\")]),_vm._v(\" was registered with a\\nparticular public key at some point in the past, but we wouldn’t know whether\\nthe public key had since been updated recently unless we download all the blocks\\nsince the last update of that name. This is due to the limitation of Bitcoin’s\\nUTXO transaction Merkle-ization model, where only the transactions (but not\\nmutable application state) are Merkle-ized into the block-hash. This lets us\\nprove existence, but not the non-existence of later updates to a name. Thus, we\\ncan’t know for certain the most recent value of a name without trusting a full\\nnode, or incurring significant costs in bandwidth by downloading the whole\\nblockchain.\")]),_c('p',[_vm._v(\"Even if a Merkle-ized search tree were implemented in NameCoin, its dependency\\non proof-of-work makes light client verification problematic. Light clients must\\ndownload a complete copy of the headers for all blocks in the entire blockchain\\n(or at least all the headers since the last update to a name). This means that\\nthe bandwidth requirements scale linearly with the amount of time \"),_c('a',{attrs:{\"href\":\"https://en.bitcoin.it/wiki/Thin_Client_Security\"}},[_vm._v(\"[21]\")]),_vm._v(\".\\nIn addition, name-changes on a proof-of-work blockchain requires waiting for\\nadditional proof-of-work confirmation blocks, which can take up to an hour on\\nBitcoin.\")]),_c('p',[_vm._v(\"With Tendermint, all we need is the most recent block-hash signed by a quorum of\\nvalidators (by voting power), and a Merkle proof to the current value associated\\nwith the name. This makes it possible to have a succinct, quick, and secure\\nlight-client verification of name values.\")]),_c('p',[_vm._v(\"In Cosmos, we can take this concept and extend it further. Each\\nname-registration zone in Cosmos can have an associated top-level-domain\\n(TLD) name such as “.com” or “.org”, and each name-registration zone can have\\nits own governance and registration rules.\")]),_c('h2',{attrs:{\"id\":\"issuance-and-incentives\"}},[_vm._v(\"Issuance and Incentives\")]),_c('h3',{attrs:{\"id\":\"the-atom-token\"}},[_vm._v(\"The Atom Token\")]),_c('p',[_vm._v(\"While the Cosmos Hub is a multi-asset distributed ledger, there is a special\\nnative token called the \"),_c('em',[_vm._v(\"atom\")]),_vm._v(\". Atoms are the only staking token of the Cosmos\\nHub. Atoms are a license for the holder to vote, validate, or delegate to other\\nvalidators. Like Ethereum’s ether, atoms can also be used to pay for\\ntransaction fees to mitigate spam. Additional inflationary atoms and block\\ntransaction fees are rewarded to validators and delegators who delegate to\\nvalidators.\")]),_c('p',[_vm._v(\"The \"),_c('code',{pre:true},[_vm._v(\"BurnAtomTx\")]),_vm._v(\" transaction can be used to recover any proportionate amount of\\ntokens from the reserve pool.\")]),_c('h4',{attrs:{\"id\":\"fundraiser\"}},[_vm._v(\"Fundraiser\")]),_c('p',[_vm._v(\"The initial distribution of atom tokens and validators on Genesis will go to the\\ndonors of the Cosmos Fundraiser (75%), lead donors (5%), Cosmos Network\\nFoundation (10%), and ALL IN BITS, Inc (10%). From genesis onward, 1/3 of the\\ntotal amount of atoms will be rewarded to bonded validators and delegators\\nevery year.\")]),_c('p',[_vm._v(\"See the \"),_c('a',{attrs:{\"href\":\"https://github.com/cosmos/cosmos/blob/master/PLAN.md\"}},[_vm._v(\"Cosmos Plan\")]),_vm._v(\"\\nfor additional details.\")]),_c('h3',{attrs:{\"id\":\"limitations-on-the-number-of-validators\"}},[_vm._v(\"Limitations on the Number of Validators\")]),_c('p',[_vm._v(\"Unlike Bitcoin or other proof-of-work blockchains, a Tendermint blockchain gets\\nslower with more validators due to the increased communication complexity.\\nFortunately, we can support enough validators to make for a robust globally\\ndistributed blockchain with very fast transaction confirmation times, and, as\\nbandwidth, storage, and parallel compute capacity increases, we will be able to\\nsupport more validators in the future.\")]),_c('p',[_vm._v(\"On genesis day, the maximum number of validators will be set to 100, and this\\nnumber will increase at a rate of 13% for 10 years, and settle at 300\\nvalidators.\")]),_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"v-pre\":\"\"}},[_vm._v(\"Year 0: 100\\nYear 1: 113\\nYear 2: 127\\nYear 3: 144\\nYear 4: 163\\nYear 5: 184\\nYear 6: 208\\nYear 7: 235\\nYear 8: 265\\nYear 9: 300\\nYear 10: 300\\n...\\n\")])]),_c('h3',{attrs:{\"id\":\"becoming-a-validator-after-genesis-day\"}},[_vm._v(\"Becoming a Validator After Genesis Day\")]),_c('p',[_vm._v(\"Atom holders who are not already can become validators by signing and\\nsubmitting a \"),_c('code',{pre:true},[_vm._v(\"BondTx\")]),_vm._v(\" transaction. The amount of atoms provided as collateral\\nmust be nonzero. Anyone can become a validator at any time, except when the\\nsize of the current validator set is greater than the maximum number of\\nvalidators allowed. In that case, the transaction is only valid if the amount\\nof atoms is greater than the amount of effective atoms held by the smallest\\nvalidator, where effective atoms include delegated atoms. When a new validator\\nreplaces an existing validator in such a way, the existing validator becomes\\ninactive and all the atoms and delegated atoms enter the unbonding state.\")]),_c('h3',{attrs:{\"id\":\"penalties-for-validators\"}},[_vm._v(\"Penalties for Validators\")]),_c('p',[_vm._v(\"There must be some penalty imposed on the validators for any intentional\\nor unintentional deviation from the sanctioned protocol. Some evidence is\\nimmediately admissible, such as a double-sign at the same height and round, or a\\nviolation of “prevote-the-lock” (a rule of the Tendermint consensus protocol).\\nSuch evidence will result in the validator losing its good standing and its\\nbonded atoms as well its proportionate share of tokens in the reserve pool –\\ncollectively called its “stake” – will get slashed.\")]),_c('p',[_vm._v(\"Sometimes, validators will not be available, either due to regional network\\ndisruptions, power failure, or other reasons. If, at any point in the past\\n\"),_c('code',{pre:true},[_vm._v(\"ValidatorTimeoutWindow\")]),_vm._v(\" blocks, a validator’s commit vote is not included in\\nthe blockchain more than \"),_c('code',{pre:true},[_vm._v(\"ValidatorTimeoutMaxAbsent\")]),_vm._v(\" times, that validator will\\nbecome inactive, and lose \"),_c('code',{pre:true},[_vm._v(\"ValidatorTimeoutPenalty\")]),_vm._v(\" (DEFAULT 1%) of its stake.\")]),_c('p',[_vm._v(\"Some “malicious” behavior does not produce obviously discernable evidence on the\\nblockchain. In these cases, the validators can coordinate out of band to force\\nthe timeout of these malicious validators, if there is a supermajority\\nconsensus.\")]),_c('p',[_vm._v(\"In situations where the Cosmos Hub halts due to a ≥⅓ coalition of voting power\\ngoing offline, or in situations where a ≥⅓ coalition of voting power censor\\nevidence of malicious behavior from entering the blockchain, the hub must\\nrecover with a hard-fork reorg-proposal. (Link to “Forks and Censorship\\nAttacks”).\")]),_c('h3',{attrs:{\"id\":\"transaction-fees\"}},[_vm._v(\"Transaction Fees\")]),_c('p',[_vm._v(\"Cosmos Hub validators can accept any token type or combination of types as fees\\nfor processing a transaction. Each validator can subjectively set whatever\\nexchange rate it wants, and choose whatever transactions it wants, as long as\\nthe \"),_c('code',{pre:true},[_vm._v(\"BlockGasLimit\")]),_vm._v(\" is not exceeded. The collected fees, minus any taxes\\nspecified below, are redistributed to the bonded stakeholders in proportion to\\ntheir bonded atoms, every \"),_c('code',{pre:true},[_vm._v(\"ValidatorPayoutPeriod\")]),_vm._v(\" (DEFAULT 1 hour).\")]),_c('p',[_vm._v(\"Of the collected transaction fees, \"),_c('code',{pre:true},[_vm._v(\"ReserveTax\")]),_vm._v(\" (DEFAULT 2%) will go toward the\\nreserve pool to increase the reserve pool and increase the security and value of\\nthe Cosmos network. These funds can also be distributed in accordance with the\\ndecisions made by the governance system.\")]),_c('p',[_vm._v(\"Atom holders who delegate their voting power to other validators pay a\\ncommission to the delegated validator. The commission can be set by each\\nvalidator.\")]),_c('h3',{attrs:{\"id\":\"incentivizing-hackers\"}},[_vm._v(\"Incentivizing Hackers\")]),_c('p',[_vm._v(\"The security of the Cosmos Hub is a function of the security of the underlying\\nvalidators and the choice of delegation by delegators. In order to encourage\\nthe discovery and early reporting of found vulnerabilities, the Cosmos Hub\\nencourages hackers to publish successful exploits via a \"),_c('code',{pre:true},[_vm._v(\"ReportHackTx\")]),_vm._v(\"\\ntransaction that says, “This validator got hacked. Please send\\nbounty to this address”. Upon such an exploit, the validator and delegators\\nwill become inactive, \"),_c('code',{pre:true},[_vm._v(\"HackPunishmentRatio\")]),_vm._v(\" (default 5%) of everyone’s atoms\\nwill get slashed, and \"),_c('code',{pre:true},[_vm._v(\"HackRewardRatio\")]),_vm._v(\" (default 5%) of everyone’s atoms will\\nget rewarded to the hacker’s bounty address. The validator must recover the\\nremaining atoms by using their backup key.\")]),_c('p',[_vm._v(\"In order to prevent this feature from being abused to transfer unvested atoms,\\nthe portion of vested vs unvested atoms of validators and delegators before and\\nafter the \"),_c('code',{pre:true},[_vm._v(\"ReportHackTx\")]),_vm._v(\" will remain the same, and the hacker bounty will\\ninclude some unvested atoms, if any.\")]),_c('h3',{attrs:{\"id\":\"governance-specification\"}},[_vm._v(\"Governance Specification\")]),_c('p',[_vm._v(\"The Cosmos Hub is operated by a distributed organization that requires a well-defined\\ngovernance mechanism in order to coordinate various changes to the blockchain,\\nsuch as the variable parameters of the system, as well as software upgrades and\\nconstitutional amendments.\")]),_c('p',[_vm._v(\"All validators are responsible for voting on all proposals. Failing to vote on\\na proposal in a timely manner will result in the validator being deactivated\\nautomatically for a period of time called the \"),_c('code',{pre:true},[_vm._v(\"AbsenteeismPenaltyPeriod\")]),_vm._v(\"\\n(DEFAULT 1 week).\")]),_c('p',[_vm._v(\"Delegators automatically inherit the vote of the delegated validator. This vote\\nmay be overridden manually. Unbonded atoms get no vote.\")]),_c('p',[_vm._v(\"Each proposal requires a deposit of \"),_c('code',{pre:true},[_vm._v(\"MinimumProposalDeposit\")]),_vm._v(\" tokens, which may\\nbe a combination of one or more tokens including atoms. For each proposal, the\\nvoters may vote to take the deposit. If more than half of the voters choose to\\ntake the deposit (e.g. because the proposal was spam), the deposit goes to the\\nreserve pool, except any atoms which are burned.\")]),_c('p',[_vm._v(\"For each proposal, voters may vote with the following options:\")]),_c('ul',[_c('li',[_vm._v(\"Yea\")]),_c('li',[_vm._v(\"YeaWithForce\")]),_c('li',[_vm._v(\"Nay\")]),_c('li',[_vm._v(\"NayWithForce\")]),_c('li',[_vm._v(\"Abstain\")])]),_c('p',[_vm._v(\"A strict majority of Yea or YeaWithForce votes (or Nay or NayWithForce votes) is\\nrequired for the proposal to be decided as passed (or decided as failed), but\\n1/3+ can veto the majority decision by voting “with force”. When a strict\\nmajority is vetoed, everyone gets punished by losing \"),_c('code',{pre:true},[_vm._v(\"VetoPenaltyFeeBlocks\")]),_vm._v(\"\\n(DEFAULT 1 day’s worth of blocks) worth of fees (except taxes which will not be\\naffected), and the party that vetoed the majority decision will be additionally\\npunished by losing \"),_c('code',{pre:true},[_vm._v(\"VetoPenaltyAtoms\")]),_vm._v(\" (DEFAULT 0.1%) of its atoms.\")]),_c('h3',{attrs:{\"id\":\"parameter-change-proposal\"}},[_vm._v(\"Parameter Change Proposal\")]),_c('p',[_vm._v(\"Any of the parameters defined here can be changed with the passing of a\\n\"),_c('code',{pre:true},[_vm._v(\"ParameterChangeProposal\")]),_vm._v(\".\")]),_c('h3',{attrs:{\"id\":\"bounty-proposal\"}},[_vm._v(\"Bounty Proposal\")]),_c('p',[_vm._v(\"Atoms can be inflated and reserve pool funds spent with the passing of a \"),_c('code',{pre:true},[_vm._v(\"BountyProposal\")]),_vm._v(\".\")]),_c('h3',{attrs:{\"id\":\"text-proposal\"}},[_vm._v(\"Text Proposal\")]),_c('p',[_vm._v(\"All other proposals, such as a proposal to upgrade the protocol, will be\\ncoordinated via the generic \"),_c('code',{pre:true},[_vm._v(\"TextProposal\")]),_vm._v(\".\")]),_c('h2',{attrs:{\"id\":\"roadmap\"}},[_vm._v(\"Roadmap\")]),_c('p',[_vm._v(\"See \"),_c('a',{attrs:{\"href\":\"https://github.com/cosmos/cosmos/blob/master/PLAN.md\"}},[_vm._v(\"the Plan\")]),_vm._v(\".\")]),_c('h2',{attrs:{\"id\":\"related-work\"}},[_vm._v(\"Related Work\")]),_c('p',[_vm._v(\"There have been many innovations in blockchain consensus and scalability in the\\npast couple of years. This section provides a brief survey of a select number\\nof important ones.\")]),_c('h3',{attrs:{\"id\":\"consensus-systems\"}},[_vm._v(\"Consensus Systems\")]),_c('h4',{attrs:{\"id\":\"classic-byzantine-fault-tolerance\"}},[_vm._v(\"Classic Byzantine Fault Tolerance\")]),_c('p',[_vm._v(\"Consensus in the presence of malicious participants is a problem dating back to\\nthe early 1980s, when Leslie Lamport coined the phrase “Byzantine fault” to\\nrefer to arbitrary process behavior that deviates from the intended behavior,\\nin contrast to a “crash fault”, wherein a process simply crashes. Early\\nsolutions were discovered for synchronous networks where there is an upper\\nbound on message latency, though practical use was limited to highly controlled\\nenvironments such as airplane controllers and datacenters synchronized via\\natomic clocks. It was not until the late 90s that Practical Byzantine Fault\\nTolerance (PBFT) \"),_c('a',{attrs:{\"href\":\"http://pmg.csail.mit.edu/papers/osdi99.pdf\"}},[_vm._v(\"[11]\")]),_vm._v(\" was introduced as an efficient partially\\nsynchronous consensus algorithm able to tolerate up to ⅓ of processes behaving\\narbitrarily. PBFT became the standard algorithm, spawning many variations,\\nincluding most recently one created by IBM as part of their contribution to\\nHyperledger.\")]),_c('p',[_vm._v(\"The main benefit of Tendermint consensus over PBFT is that Tendermint has an\\nimproved and simplified underlying structure, some of which is a result of\\nembracing the blockchain paradigm. Tendermint blocks must commit in order,\\nwhich obviates the complexity and communication overhead associated with PBFT’s\\nview-changes. In Cosmos and many cryptocurrencies, there is no need to allow\\nfor block \"),_c('em',[_vm._v(\"N+i\")]),_vm._v(\" where \"),_c('em',[_vm._v(\"i >= 1\")]),_vm._v(\" to commit, when block \"),_c('em',[_vm._v(\"N\")]),_vm._v(\"\\nitself hasn’t yet committed. If bandwidth is the reason why block \"),_c('em',[_vm._v(\"N\")]),_vm._v(\"\\nhasn’t committed in a Cosmos zone, then it doesn’t help to use bandwidth sharing\\nvotes for blocks \"),_c('em',[_vm._v(\"N+i\")]),_vm._v(\". If a network partition or offline nodes is the\\nreason why block \"),_c('em',[_vm._v(\"N\")]),_vm._v(\" hasn’t committed, then \"),_c('em',[_vm._v(\"N+i\")]),_vm._v(\" won’t commit\\nanyway.\")]),_c('p',[_vm._v(\"In addition, the batching of transactions into blocks allows for regular\\nMerkle-hashing of the application state, rather than periodic digests as with\\nPBFT’s checkpointing scheme. This allows for faster provable transaction\\ncommits for light-clients and faster inter-blockchain communication.\")]),_c('p',[_vm._v(\"Tendermint BFT also includes many optimizations and features that go above and\\nbeyond what is specified in PBFT. For example, the blocks proposed by\\nvalidators are split into parts, Merkle-ized, and gossipped in such a way that\\nimproves broadcasting performance (see LibSwift \"),_c('a',{attrs:{\"href\":\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\"}},[_vm._v(\"[19]\")]),_vm._v(\" for inspiration).\\nAlso, Tendermint BFT doesn’t make any assumption about point-to-point\\nconnectivity, and functions for as long as the P2P network is weakly connected.\")]),_c('h4',{attrs:{\"id\":\"bitshares-delegated-stake\"}},[_vm._v(\"BitShares delegated stake\")]),_c('p',[_vm._v(\"While not the first to deploy proof-of-stake (PoS), BitShares1.0 \"),_c('a',{attrs:{\"href\":\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\"}},[_vm._v(\"[12]\")]),_vm._v(\"\\ncontributed considerably to research and adoption of PoS blockchains,\\nparticularly those known as “delegated” PoS. In BitShares, stake holders elect\\n“witnesses”, responsible for ordering and committing transactions, and\\n“delegates”, responsible for coordinating software updates and parameter\\nchanges. BitShares2.0 aims to achieve high performance (100k tx/s, 1s latency)\\nin ideal conditions, with each block signed by a single signer, and transaction\\nfinality taking quite a bit longer than the block interval. A canonical\\nspecification is still in development. Stakeholders can remove or replace\\nmisbehaving witnesses on a daily basis, but there is no significant collateral\\nof witnesses or delegators in the likeness of Tendermint PoS that get slashed\\nin the case of a successful double-spend attack.\")]),_c('h4',{attrs:{\"id\":\"stellar\"}},[_vm._v(\"Stellar\")]),_c('p',[_vm._v(\"Building on an approach pioneered by Ripple, Stellar \"),_c('a',{attrs:{\"href\":\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\"}},[_vm._v(\"[13]\")]),_vm._v(\" refined a\\nmodel of Federated Byzantine Agreement wherein the processes participating in\\nconsensus do not constitute a fixed and globally known set. Rather, each\\nprocess node curates one or more “quorum slices”, each constituting a set of\\ntrusted processes. A “quorum” in Stellar is defined to be a set of nodes that\\ncontain at least one quorum slice for each node in the set, such that agreement\\ncan be reached.\")]),_c('p',[_vm._v(\"The security of the Stellar mechanism relies on the assumption that the\\nintersection of \"),_c('em',[_vm._v(\"any\")]),_vm._v(\" two quorums is non-empty, while the availability of a node\\nrequires at least one of its quorum slices to consist entirely of correct nodes,\\ncreating a trade-off between using large or small quorum-slices that may be\\ndifficult to balance without imposing significant assumptions about trust.\\nUltimately, nodes must somehow choose adequate quorum slices for there to be\\nsufficient fault-tolerance (or any “intact nodes” at all, of which much of the\\nresults of the paper depend on), and the only provided strategy for ensuring\\nsuch a configuration is hierarchical and similar to the Border Gateway Protocol\\n(BGP), used by top-tier ISPs on the internet to establish global routing tables,\\nand by that used by browsers to manage TLS certificates; both notorious for\\ntheir insecurity.\")]),_c('p',[_vm._v(\"The criticism in the Stellar paper of the Tendermint-based proof-of-stake\\nsystems is mitigated by the token strategy described here, wherein a new type of\\ntoken called the \"),_c('em',[_vm._v(\"atom\")]),_vm._v(\" is issued that represent claims to future portions of\\nfees and rewards. The advantage of Tendermint-based proof-of-stake, then, is its\\nrelative simplicity, while still providing sufficient and provable security\\nguarantees.\")]),_c('h4',{attrs:{\"id\":\"bitcoinng\"}},[_vm._v(\"BitcoinNG\")]),_c('p',[_vm._v(\"BitcoinNG is a proposed improvement to Bitcoin that would allow for forms of\\nvertical scalability, such as increasing the block size, without the negative\\neconomic consequences typically associated with such a change, such as the\\ndisproportionately large impact on small miners. This improvement is achieved\\nby separating leader election from transaction broadcast: leaders are first\\nelected by proof-of-work in “micro-blocks”, and then able to broadcast\\ntransactions to be committed until a new micro-block is found. This reduces the\\nbandwidth requirements necessary to win the PoW race, allowing small miners to\\nmore fairly compete, and allowing transactions to be committed more regularly by\\nthe last miner to find a micro-block.\")]),_c('h4',{attrs:{\"id\":\"casper\"}},[_vm._v(\"Casper\")]),_c('p',[_vm._v(\"Casper \"),_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\"}},[_vm._v(\"[16]\")]),_vm._v(\" is a proposed proof-of-stake consensus algorithm for\\nEthereum. Its prime mode of operation is “consensus-by-bet”. By letting\\nvalidators iteratively bet on which block they believe will become committed\\ninto the blockchain based on the other bets that they have seen so far,\\nfinality can be achieved eventually.\\n\"),_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2015/12/28/understanding-serenity-part-2-casper/\"}},[_vm._v(\"link\")]),_vm._v(\".\\nThis is an active area of research by the Casper team. The challenge is in\\nconstructing a betting mechanism that can be proven to be an evolutionarily\\nstable strategy. The main benefit of Casper as compared to Tendermint may be in\\noffering “availability over consistency” – consensus does not require a >⅔\\nquorum of voting power – perhaps at the cost of commit speed or\\nimplementation complexity.\")]),_c('h3',{attrs:{\"id\":\"horizontal-scaling\"}},[_vm._v(\"Horizontal Scaling\")]),_c('h4',{attrs:{\"id\":\"interledger-protocol\"}},[_vm._v(\"Interledger Protocol\")]),_c('p',[_vm._v(\"The Interledger Protocol \"),_c('a',{attrs:{\"href\":\"https://interledger.org/rfcs/0001-interledger-architecture/\"}},[_vm._v(\"[14]\")]),_vm._v(\" is not strictly a scalability solution.\\nIt provides an ad hoc interoperation between different ledger systems through a\\nloosely coupled bilateral relationship network. Like the Lightning Network,\\nthe purpose of ILP is to facilitate payments, but it specifically focuses on\\npayments across disparate ledger types, and extends the atomic transaction\\nmechanism to include not only hash-locks, but also a quorum of notaries (called\\nthe Atomic Transport Protocol). The latter mechanism for enforcing atomicity\\nin inter-ledger transactions is similar to Tendermint’s light-client SPV\\nmechanism, so an illustration of the distinction between ILP and Cosmos/IBC is\\nwarranted, and provided below.\")]),_c('ol',[_c('li',[_c('p',[_vm._v(\"The notaries of a connector in ILP do not support membership changes, and\\ndo not allow for flexible weighting between notaries. On the other hand,\\nIBC is designed specifically for blockchains, where validators can have\\ndifferent weights, and where membership can change over the course of the\\nblockchain.\")])]),_c('li',[_c('p',[_vm._v(\"As in the Lightning Network, the receiver of payment in ILP must be online to\\nsend a confirmation back to the sender. In a token transfer over IBC, the\\nvalidator-set of the receiver’s blockchain is responsible for providing\\nconfirmation, not the receiving user.\")])]),_c('li',[_c('p',[_vm._v(\"The most striking difference is that ILP’s connectors are not responsible or\\nkeeping authoritative state about payments, whereas in Cosmos, the validators\\nof a hub are the authority of the state of IBC token transfers as well as the\\nauthority of the amount of tokens held by each zone (but not the amount of\\ntokens held by each account within a zone). This is the fundamental innovation\\nthat allows for secure asymmetric transfer of tokens from zone to zone; the\\nanalog to ILP’s connector in Cosmos is a persistent and maximally secure\\nblockchain ledger, the Cosmos Hub.\")])]),_c('li',[_c('p',[_vm._v(\"The inter-ledger payments in ILP need to be backed by an exchange orderbook,\\nas there is no asymmetric transfer of coins from one ledger to another, only\\nthe transfer of value or market equivalents.\")])])]),_c('h4',{attrs:{\"id\":\"sidechains\"}},[_vm._v(\"Sidechains\")]),_c('p',[_vm._v(\"Sidechains \"),_c('a',{attrs:{\"href\":\"https://blockstream.com/sidechains.pdf\"}},[_vm._v(\"[15]\")]),_vm._v(\" are a proposed mechanism for scaling the Bitcoin\\nnetwork via alternative blockchains that are “two-way pegged” to the Bitcoin\\nblockchain. (Two-way pegging is equivalent to bridging. In Cosmos we say\\n“bridging” to distinguish from market-pegging). Sidechains allow bitcoins to\\neffectively move from the Bitcoin blockchain to the sidechain and back, and\\nallow for experimentation in new features on the sidechain. As in the Cosmos\\nHub, the sidechain and Bitcoin serve as light-clients of each other, using SPV\\nproofs to determine when coins should be transferred to the sidechain and back.\\nOf course, since Bitcoin uses proof-of-work, sidechains centered around Bitcoin\\nsuffer from the many problems and risks of proof-of-work as a consensus\\nmechanism. Furthermore, this is a Bitcoin-maximalist solution that doesn’t\\nnatively support a variety of tokens and inter-zone network topology as Cosmos\\ndoes. That said, the core mechanism of the two-way peg is in principle the same\\nas that employed by the Cosmos network.\")]),_c('h4',{attrs:{\"id\":\"ethereum-scalability-efforts\"}},[_vm._v(\"Ethereum Scalability Efforts\")]),_c('p',[_vm._v(\"Ethereum is currently researching a number of different strategies to shard the\\nstate of the Ethereum blockchain to address scalability needs. These efforts\\nhave the goal of maintaining the abstraction layer offered by the current\\nEthereum Virtual Machine across the shared state space. Multiple research\\nefforts are underway at this time. \"),_c('a',{attrs:{\"href\":\"https://github.com/ethereum/EIPs/issues/53\"}},[_vm._v(\"[18]\")]),_c('a',{attrs:{\"href\":\"http://vitalik.ca/files/mauve_paper.html\"}},[_vm._v(\"[22]\")])]),_c('h5',{attrs:{\"id\":\"cosmos-vs-ethereum-20-mauve\"}},[_vm._v(\"Cosmos vs Ethereum 2.0 Mauve\")]),_c('p',[_vm._v(\"Cosmos and Ethereum 2.0 Mauve \"),_c('a',{attrs:{\"href\":\"http://vitalik.ca/files/mauve_paper.html\"}},[_vm._v(\"[22]\")]),_vm._v(\" have different design goals.\")]),_c('ul',[_c('li',[_vm._v(\"Cosmos is specifically about tokens. Mauve is about scaling general computation.\")]),_c('li',[_vm._v(\"Cosmos is not bound to the EVM, so even different VMs can interoperate.\")]),_c('li',[_vm._v(\"Cosmos lets the zone creator determine who validates the zone.\")]),_c('li',[_vm._v(\"Anyone can start a new zone in Cosmos (unless governance decides otherwise).\")]),_c('li',[_vm._v(\"The hub isolates zone failures so global token invariants are preserved.\")])]),_c('h3',{attrs:{\"id\":\"general-scaling\"}},[_vm._v(\"General Scaling\")]),_c('h4',{attrs:{\"id\":\"lightning-network\"}},[_vm._v(\"Lightning Network\")]),_c('p',[_vm._v(\"The Lightning Network is a proposed token transfer network operating at a layer\\nabove the Bitcoin blockchain (and other public blockchains), enabling improvement of many\\norders of magnitude in transaction throughput by moving the majority\\nof transactions outside of the consensus ledger into so-called “payment\\nchannels”. This is made possible by on-chain cryptocurrency scripts, which\\nenable parties to enter into bilateral stateful contracts where the state can\\nbe updated by sharing digital signatures, and contracts can be closed by finally\\npublishing evidence onto the blockchain, a mechanism first popularized by\\ncross-chain atomic swaps. By opening payment channels with many parties,\\nparticipants in the Lightning Network can become focal points for routing the\\npayments of others, leading to a fully connected payment channel network, at the\\ncost of capital being tied up on payment channels.\")]),_c('p',[_vm._v(\"While the Lightning Network can also easily extend across multiple independent\\nblockchains to allow for the transfer of \"),_c('em',[_vm._v(\"value\")]),_vm._v(\" via an exchange market, it\\ncannot be used to asymmetrically transfer \"),_c('em',[_vm._v(\"tokens\")]),_vm._v(\" from one blockchain to\\nanother. The main benefit of the Cosmos network described here is to enable\\nsuch direct token transfers. That said, we expect payment channels and the\\nLightning Network to become widely adopted along with our token transfer\\nmechanism, for cost-saving and privacy reasons.\")]),_c('h4',{attrs:{\"id\":\"segregated-witness\"}},[_vm._v(\"Segregated Witness\")]),_c('p',[_vm._v(\"Segregated Witness is a Bitcoin improvement proposal\\n\"),_c('a',{attrs:{\"href\":\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\"}},[_vm._v(\"link\")]),_vm._v(\" that aims\\nto increase the per-block transaction throughput 2X or 3X, while simultaneously\\nmaking block syncing faster for new nodes. The brilliance of this solution is\\nin how it works within the limitations of Bitcoin’s current protocol and allows\\nfor a soft-fork upgrade (i.e. clients with older versions of the software will\\ncontinue to function after the upgrade). Tendermint, being a new protocol, has no\\ndesign restrictions, so it has a different scaling priorities. Primarily,\\nTendermint uses a BFT round-robin algorithm based on cryptographic signatures\\ninstead of mining, which trivially allows horizontal scaling through multiple\\nparallel blockchains, while regular, more frequent block commits allow for\\nvertical scaling as well.\")]),_c('hr'),_c('h2',{attrs:{\"id\":\"appendix\"}},[_vm._v(\"Appendix\")]),_c('h3',{attrs:{\"id\":\"fork-accountability\"}},[_vm._v(\"Fork Accountability\")]),_c('p',[_vm._v(\"A well designed consensus protocol should provide some guarantees in the event that the tolerance\\ncapacity is exceeded and the consensus fails. This is especially necessary in\\neconomic systems, where Byzantine behaviour can have substantial financial\\nreward. The most important such guarantee is a form of \"),_c('em',[_vm._v(\"fork-accountability\")]),_vm._v(\",\\nwhere the processes that caused the consensus to fail (ie. caused clients of\\nthe protocol to accept different values - a fork) can be identified and punished\\naccording to the rules of the protocol, or, possibly, the legal system. When\\nthe legal system is unreliable or excessively expensive to invoke, validators can be forced to make security\\ndeposits in order to participate, and those deposits can be revoked, or slashed,\\nwhen malicious behaviour is detected \"),_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\"}},[_vm._v(\"[10]\")]),_vm._v(\".\")]),_c('p',[_vm._v(\"Note this is unlike Bitcoin, where forking is a regular occurence due to\\nnetwork asynchrony and the probabilistic nature of finding partial hash\\ncollisions. Since in many cases a malicious fork is indistinguishable from a\\nfork due to asynchrony, Bitcoin cannot reliably implement fork-accountability,\\nother than the implicit opportunity cost paid by miners for mining an orphaned\\nblock.\")]),_c('h3',{attrs:{\"id\":\"tendermint-consensus\"}},[_vm._v(\"Tendermint Consensus\")]),_c('p',[_vm._v(\"We call the voting stages \"),_c('em',[_vm._v(\"PreVote\")]),_vm._v(\" and \"),_c('em',[_vm._v(\"PreCommit\")]),_vm._v(\". A vote can be for a\\nparticular block or for \"),_c('em',[_vm._v(\"Nil\")]),_vm._v(\". We call a collection of >⅔ PreVotes for a single\\nblock in the same round a \"),_c('em',[_vm._v(\"Polka\")]),_vm._v(\", and a collection of >⅔ PreCommits for a\\nsingle block in the same round a \"),_c('em',[_vm._v(\"Commit\")]),_vm._v(\". If >⅔ PreCommit for Nil in the same\\nround, they move to the next round.\")]),_c('p',[_vm._v(\"Note that strict determinism in the protocol incurs a weak synchrony assumption\\nas faulty leaders must be detected and skipped. Thus, validators wait some\\namount of time, \"),_c('em',[_vm._v(\"TimeoutPropose\")]),_vm._v(\", before they Prevote Nil, and the value of\\nTimeoutPropose increases with each round. Progression through the rest of a\\nround is fully asynchronous, in that progress is only made once a validator hears\\nfrom >⅔ of the network. In practice, it would take an extremely strong\\nadversary to indefinitely thwart the weak synchrony assumption (causing the\\nconsensus to fail to ever commit a block), and doing so can be made even more\\ndifficult by using randomized values of TimeoutPropose on each validator.\")]),_c('p',[_vm._v(\"An additional set of constraints, or Locking Rules, ensure that the network will\\neventually commit just one block at each height. Any malicious attempt to cause\\nmore than one block to be committed at a given height can be identified. First,\\na PreCommit for a block must come with justification, in the form of a Polka for\\nthat block. If the validator has already PreCommit a block at round\\n\"),_c('em',[_vm._v(\"R\"),_c('em',[_vm._v(\"1\")]),_vm._v(\", we say they are _locked\")]),_vm._v(\" on that block, and the Polka used to\\njustify the new PreCommit at round \"),_c('em',[_vm._v(\"R_2\")]),_vm._v(\" must come in a round\\n\"),_c('em',[_vm._v(\"R_polka\")]),_vm._v(\" where \"),_c('em',[_vm._v(\"R_1 < R_polka <= R_2\")]),_vm._v(\". Second, validators\\nmust Propose and/or PreVote the block they are locked on. Together, these\\nconditions ensure that a validator does not PreCommit without sufficient\\nevidence as justification, and that validators which have already PreCommit\\ncannot contribute to evidence to PreCommit something else. This ensures both\\nsafety and liveness of the consensus algorithm.\")]),_c('p',[_vm._v(\"The full details of the protocol are described\\n\"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm\"}},[_vm._v(\"here\")]),_vm._v(\".\")]),_c('h3',{attrs:{\"id\":\"tendermint-light-clients\"}},[_vm._v(\"Tendermint Light Clients\")]),_c('p',[_vm._v(\"The need to sync all block headers is eliminated in Tendermint-PoS as the\\nexistence of an alternative chain (a fork) means ≥⅓ of bonded stake can be\\nslashed. Of course, since slashing requires that \"),_c('em',[_vm._v(\"someone\")]),_vm._v(\" share evidence of a\\nfork, light clients should store any block-hash commits that it sees.\\nAdditionally, light clients could periodically stay synced with changes to the\\nvalidator set, in order to avoid \"),_c('a',{attrs:{\"href\":\"#preventing-long-range-attacks\"}},[_vm._v(\"long range\\nattacks\")]),_vm._v(\" (but other solutions are possible).\")]),_c('p',[_vm._v(\"In spirit similar to Ethereum, Tendermint enables applications to embed a\\nglobal Merkle root hash in each block, allowing easily verifiable state queries\\nfor things like account balances, the value stored in a contract, or the\\nexistence of an unspent transaction output, depending on the nature of the\\napplication.\")]),_c('h3',{attrs:{\"id\":\"preventing-long-range-attacks\"}},[_vm._v(\"Preventing Long Range Attacks\")]),_c('p',[_vm._v(\"Assuming a sufficiently resilient collection of broadcast networks and a static\\nvalidator set, any fork in the blockchain can be detected and the deposits of\\nthe offending validators slashed. This innovation, first suggested by Vitalik\\nButerin in early 2014, solves the nothing-at-stake problem of other\\nproof-of-stake cryptocurrencies (see \"),_c('a',{attrs:{\"href\":\"#related-work\"}},[_vm._v(\"Related Work\")]),_vm._v(\"). However,\\nsince validator sets must be able to change, over a long range of time the\\noriginal validators may all become unbonded, and hence would be free to create a\\nnew chain from the genesis block, incurring no cost as they no longer have\\ndeposits locked up. This attack came to be known as the Long Range Attack (LRA),\\nin contrast to a Short Range Attack, where validators who are currently bonded\\ncause a fork and are hence punishable (assuming a fork-accountable BFT algorithm\\nlike Tendermint consensus). Long Range Attacks are often thought to be a\\ncritical blow to proof-of-stake.\")]),_c('p',[_vm._v(\"Fortunately, the LRA can be mitigated as follows. First, for a validator to\\nunbond (thereby recovering their collateral deposit and no longer earning fees\\nto participate in the consensus), the deposit must be made untransferable for an\\namount of time known as the “unbonding period”, which may be on the order of\\nweeks or months. Second, for a light client to be secure, the first time it\\nconnects to the network it must verify a recent block-hash against a trusted\\nsource, or preferably multiple sources. This condition is sometimes referred to\\nas “weak subjectivity”. Finally, to remain secure, it must sync up with the\\nlatest validator set at least as frequently as the length of the unbonding\\nperiod. This ensures that the light client knows about changes to the validator\\nset before a validator has its capital unbonded and thus no longer at stake,\\nwhich would allow it to deceive the client by carrying out a long range attack\\nby creating new blocks beginning back at a height where it was bonded (assuming\\nit has control of sufficiently many of the early private keys).\")]),_c('p',[_vm._v(\"Note that overcoming the LRA in this way requires an overhaul of the original\\nsecurity model of proof-of-work. In PoW, it is assumed that a light client can\\nsync to the current height from the trusted genesis block at any time simply by\\nprocessing the proof-of-work in every block header. To overcome the LRA,\\nhowever, we require that a light client come online with some regularity to\\ntrack changes in the validator set, and that the first time they come online\\nthey must be particularly careful to authenticate what they hear from the\\nnetwork against trusted sources. Of course, this latter requirement is similar\\nto that of Bitcoin, where the protocol and software must also be obtained from a\\ntrusted source.\")]),_c('p',[_vm._v(\"The above method for preventing LRA is well suited for validators and full nodes\\nof a Tendermint-powered blockchain because these nodes are meant to remain\\nconnected to the network. The method is also suitable for light clients that\\ncan be expected to sync with the network frequently. However, for light clients\\nthat are not expected to have frequent access to the internet or the blockchain\\nnetwork, yet another solution can be used to overcome the LRA. Non-validator\\ntoken holders can post their tokens as collateral with a very long unbonding\\nperiod (e.g. much longer than the unbonding period for validators) and serve\\nlight clients with a secondary method of attesting to the validity of current\\nand past block-hashes. While these tokens do not count toward the security of\\nthe blockchain’s consensus, they nevertheless can provide strong guarantees for\\nlight clients. If historical block-hash querying were supported in Ethereum,\\nanyone could bond their tokens in a specially designed smart contract and\\nprovide attestation services for pay, effectively creating a market for\\nlight-client LRA security.\")]),_c('h3',{attrs:{\"id\":\"overcoming-forks-and-censorship-attacks\"}},[_vm._v(\"Overcoming Forks and Censorship Attacks\")]),_c('p',[_vm._v(\"Due to the definition of a block commit, any ≥⅓ coalition of voting power can\\nhalt the blockchain by going offline or not broadcasting their votes. Such a\\ncoalition can also censor particular transactions by rejecting blocks that\\ninclude these transactions, though this would result in a significant proportion\\nof block proposals to be rejected, which would slow down the rate of block\\ncommits of the blockchain, reducing its utility and value. The malicious\\ncoalition might also broadcast votes in a trickle so as to grind blockchain\\nblock commits to a near halt, or engage in any combination of these attacks.\\nFinally, it can cause the blockchain to fork, by double-signing or violating the\\nlocking rules.\")]),_c('p',[_vm._v(\"If a globally active adversary were also involved, it could partition the network in\\nsuch a way that it may appear that the wrong subset of validators were\\nresponsible for the slowdown. This is not just a limitation of Tendermint, but\\nrather a limitation of all consensus protocols whose network is potentially\\ncontrolled by an active adversary.\")]),_c('p',[_vm._v(\"For these types of attacks, a subset of the validators should coordinate through\\nexternal means to sign a reorg-proposal that chooses a fork (and any evidence\\nthereof) and the initial subset of validators with their signatures. Validators\\nwho sign such a reorg-proposal forego their collateral on all other forks.\\nClients should verify the signatures on the reorg-proposal, verify any evidence,\\nand make a judgement or prompt the end-user for a decision. For example, a\\nphone wallet app may prompt the user with a security warning, while a\\nrefrigerator may accept any reorg-proposal signed by +½ of the original\\nvalidators by voting power.\")]),_c('p',[_vm._v(\"No non-synchronous Byzantine fault-tolerant algorithm can come to consensus when\\n≥⅓ of voting power are dishonest, yet a fork assumes that ≥⅓ of voting power\\nhave already been dishonest by double-signing or lock-changing without\\njustification. So, signing the reorg-proposal is a coordination problem that\\ncannot be solved by any non-synchronous protocol (i.e. automatically, and\\nwithout making assumptions about the reliability of the underlying network).\\nFor now, we leave the problem of reorg-proposal coordination to human\\ncoordination via social consensus on internet media. Validators must take care\\nto ensure that there are no remaining network partitions prior to signing a\\nreorg-proposal, to avoid situations where two conflicting reorg-proposals are\\nsigned.\")]),_c('p',[_vm._v(\"Assuming that the external coordination medium and protocol is robust, it\\nfollows that forks are less of a concern than censorship attacks.\")]),_c('p',[_vm._v(\"In addition to forks and censorship, which require ≥⅓ Byzantine voting power, a\\ncoalition of >⅔ voting power may commit arbitrary, invalid state. This is\\ncharacteristic of any (BFT) consensus system. Unlike double-signing, which\\ncreates forks with easily verifiable evidence, detecting committment of an\\ninvalid state requires non-validating peers to verify whole blocks, which\\nimplies that they keep a local copy of the state and execute each transaction,\\ncomputing the state root independently for themselves. Once detected, the only\\nway to handle such a failure is via social consensus. For instance, in\\nsituations where Bitcoin has failed, whether forking due to software bugs (as in\\nMarch 2013), or committing invalid state due to Byzantine behavior of miners (as\\nin July 2015), the well connected community of businesses, developers, miners,\\nand other organizations established a social consensus as to what manual actions\\nwere required by participants to heal the network. Furthermore, since\\nvalidators of a Tendermint blockchain may be expected to be identifiable,\\ncommitment of an invalid state may even be punishable by law or some external\\njurisprudence, if desired.\")]),_c('h3',{attrs:{\"id\":\"abci-specification\"}},[_vm._v(\"ABCI Specification\")]),_c('p',[_vm._v(\"ABCI consists of 3 primary message types that get delivered from the core to the\\napplication. The application replies with corresponding response messages.\")]),_c('p',[_vm._v(\"The \"),_c('code',{pre:true},[_vm._v(\"AppendTx\")]),_vm._v(\" message is the work horse of the application. Each transaction in\\nthe blockchain is delivered with this message. The application needs to validate\\neach transactions received with the AppendTx message against the current state,\\napplication protocol, and the cryptographic credentials of the transaction. A\\nvalidated transaction then needs to update the application state — by binding a\\nvalue into a key values store, or by updating the UTXO database.\")]),_c('p',[_vm._v(\"The \"),_c('code',{pre:true},[_vm._v(\"CheckTx\")]),_vm._v(\" message is similar to AppendTx, but it’s only for validating\\ntransactions. Tendermint BFT’s mempool first checks the validity of a\\ntransaction with CheckTx, and only relays valid transactions to its peers.\\nApplications may check an incrementing nonce in the transaction and return an\\nerror upon CheckTx if the nonce is old.\")]),_c('p',[_vm._v(\"The \"),_c('code',{pre:true},[_vm._v(\"Commit\")]),_vm._v(\" message is used to compute a cryptographic commitment to the\\ncurrent application state, to be placed into the next block header. This has\\nsome handy properties. Inconsistencies in updating that state will now appear as\\nblockchain forks which catches a whole class of programming errors. This also\\nsimplifies the development of secure lightweight clients, as Merkle-hash proofs\\ncan be verified by checking against the block-hash, and the block-hash is signed\\nby a quorum of validators (by voting power).\")]),_c('p',[_vm._v(\"Additional ABCI messages allow the application to keep track of and change the\\nvalidator set, and for the application to receive the block information, such as\\nthe height and the commit votes.\")]),_c('p',[_vm._v(\"ABCI requests/responses are simple Protobuf messages. Check out the \"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/abci/blob/master/types/types.proto\"}},[_vm._v(\"schema\\nfile\")]),_vm._v(\".\")]),_c('h5',{attrs:{\"id\":\"appendtx\"}},[_vm._v(\"AppendTx\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": The request transaction bytes\")])])]),_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Code (uint32)\")]),_vm._v(\": Response code\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": Result bytes, if any\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Log (string)\")]),_vm._v(\": Debug or error message\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nAppend and run a transaction. If the transaction is valid, returns\\nCodeType.OK\")])]),_c('h5',{attrs:{\"id\":\"checktx\"}},[_vm._v(\"CheckTx\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": The request transaction bytes\")])])]),_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Code (uint32)\")]),_vm._v(\": Response code\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": Result bytes, if any\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Log (string)\")]),_vm._v(\": Debug or error message\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nValidate a transaction. This message should not mutate the state.\\nTransactions are first run through CheckTx before broadcast to peers in the\\nmempool layer.\\nYou can make CheckTx semi-stateful and clear the state upon \"),_c('code',{pre:true},[_vm._v(\"Commit\")]),_vm._v(\" or\\n\"),_c('code',{pre:true},[_vm._v(\"BeginBlock\")]),_vm._v(\",\\nto allow for dependent sequences of transactions in the same block.\")])]),_c('h5',{attrs:{\"id\":\"commit\"}},[_vm._v(\"Commit\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": The Merkle root hash\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Log (string)\")]),_vm._v(\": Debug or error message\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nReturn a Merkle root hash of the application state.\")])]),_c('h5',{attrs:{\"id\":\"query\"}},[_vm._v(\"Query\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": The query request bytes\")])])]),_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Code (uint32)\")]),_vm._v(\": Response code\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": The query response bytes\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Log (string)\")]),_vm._v(\": Debug or error message\")])])])]),_c('h5',{attrs:{\"id\":\"flush\"}},[_vm._v(\"Flush\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nFlush the response queue. Applications that implement \"),_c('code',{pre:true},[_vm._v(\"types.Application\")]),_vm._v(\"\\nneed not implement this message – it’s handled by the project.\")])]),_c('h5',{attrs:{\"id\":\"info\"}},[_vm._v(\"Info\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Data ([]byte)\")]),_vm._v(\": The info bytes\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nReturn information about the application state. Application specific.\")])]),_c('h5',{attrs:{\"id\":\"setoption\"}},[_vm._v(\"SetOption\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Key (string)\")]),_vm._v(\": Key to set\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Value (string)\")]),_vm._v(\": Value to set for key\")])])]),_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Log (string)\")]),_vm._v(\": Debug or error message\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nSet application options. E.g. Key=“mode”, Value=“mempool” for a mempool\\nconnection, or Key=“mode”, Value=“consensus” for a consensus connection.\\nOther options are application specific.\")])]),_c('h5',{attrs:{\"id\":\"initchain\"}},[_vm._v(\"InitChain\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Validators ([]Validator)\")]),_vm._v(\": Initial genesis-validators\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nCalled once upon genesis\")])]),_c('h5',{attrs:{\"id\":\"beginblock\"}},[_vm._v(\"BeginBlock\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Height (uint64)\")]),_vm._v(\": The block height that is starting\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nSignals the beginning of a new block. Called prior to any AppendTxs.\")])]),_c('h5',{attrs:{\"id\":\"endblock\"}},[_vm._v(\"EndBlock\")]),_c('ul',[_c('li',[_c('strong',[_vm._v(\"Arguments\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Height (uint64)\")]),_vm._v(\": The block height that ended\")])])]),_c('li',[_c('strong',[_vm._v(\"Returns\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Validators ([]Validator)\")]),_vm._v(\": Changed validators with new voting powers (0\\nto remove)\")])])]),_c('li',[_c('strong',[_vm._v(\"Usage\")]),_vm._v(\":\"),_c('br'),_vm._v(\"\\nSignals the end of a block. Called prior to each Commit after all\\ntransactions\")])]),_c('p',[_vm._v(\"See \"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/abci#message-types\"}},[_vm._v(\"the ABCI repository\")]),_vm._v(\" for more details.\")]),_c('h3',{attrs:{\"id\":\"ibc-packet-delivery-acknowledgement\"}},[_vm._v(\"IBC Packet Delivery Acknowledgement\")]),_c('p',[_vm._v(\"There are several reasons why a sender may want the acknowledgement of delivery\\nof a packet by the receiving chain. For example, the sender may not know the\\nstatus of the destination chain, if it is expected to be faulty. Or, the sender\\nmay want to impose a timeout on the packet (with the \"),_c('code',{pre:true},[_vm._v(\"MaxHeight\")]),_vm._v(\" packet field),\\nwhile any destination chain may suffer from a denial-of-service attack with a\\nsudden spike in the number of incoming packets.\")]),_c('p',[_vm._v(\"In these cases, the sender can require delivery acknowledgement by setting the\\ninitial packet status to \"),_c('code',{pre:true},[_vm._v(\"AckPending\")]),_vm._v(\". Then, it is the receiving chain’s\\nresponsibility to confirm delivery by including an abbreviated \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" in the\\napp Merkle hash.\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack.png\",\"alt\":\"Figure of Zone1, Zone2, and Hub IBC withacknowledgement\"}})]),_c('p',[_vm._v(\"First, an \"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommit\")]),_vm._v(\" and \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" are posted on “Hub” that proves\\nthe existence of an \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" on “Zone1”. Say that \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" has the\\nfollowing value:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"FromChainID\")]),_vm._v(\": “Zone1”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"FromBlockHeight\")]),_vm._v(\": 100 (say)\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Packet\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Header\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacketHeader\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"SrcChainID\")]),_vm._v(\": “Zone1”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"DstChainID\")]),_vm._v(\": “Zone2”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Number\")]),_vm._v(\": 200 (say)\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Status\")]),_vm._v(\": \"),_c('code',{pre:true},[_vm._v(\"AckPending\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Type\")]),_vm._v(\": “coin”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"MaxHeight\")]),_vm._v(\": 350 (say “Hub” is currently at height 300)\")])])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Payload\")]),_vm._v(\": <The bytes of a “coin” payload>\")])])])]),_c('p',[_vm._v(\"Next, an \"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommit\")]),_vm._v(\" and \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" are posted on “Zone2” that proves\\nthe existence of an \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" on “Hub”. Say that \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" has the\\nfollowing value:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"FromChainID\")]),_vm._v(\": “Hub”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"FromBlockHeight\")]),_vm._v(\": 300\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Packet\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Header\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacketHeader\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"SrcChainID\")]),_vm._v(\": “Zone1”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"DstChainID\")]),_vm._v(\": “Zone2”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Number\")]),_vm._v(\": 200\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Status\")]),_vm._v(\": \"),_c('code',{pre:true},[_vm._v(\"AckPending\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Type\")]),_vm._v(\": “coin”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"MaxHeight\")]),_vm._v(\": 350\")])])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Payload\")]),_vm._v(\": <The same bytes of a “coin” payload>\")])])])]),_c('p',[_vm._v(\"Next, “Zone2” must include in its app-hash an abbreviated packet that shows the\\nnew status of \"),_c('code',{pre:true},[_vm._v(\"AckSent\")]),_vm._v(\". An \"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommit\")]),_vm._v(\" and \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" are posted back\\non “Hub” that proves the existence of an abbreviated \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" on\\n“Zone2”. Say that \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" has the following value:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"FromChainID\")]),_vm._v(\": “Zone2”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"FromBlockHeight\")]),_vm._v(\": 400 (say)\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Packet\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Header\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacketHeader\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"SrcChainID\")]),_vm._v(\": “Zone1”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"DstChainID\")]),_vm._v(\": “Zone2”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Number\")]),_vm._v(\": 200\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Status\")]),_vm._v(\": \"),_c('code',{pre:true},[_vm._v(\"AckSent\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Type\")]),_vm._v(\": “coin”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"MaxHeight\")]),_vm._v(\": 350\")])])]),_c('li',[_c('code',{pre:true},[_vm._v(\"PayloadHash\")]),_vm._v(\": <The hash bytes of the same “coin” payload>\")])])])]),_c('p',[_vm._v(\"Finally, “Hub” must update the status of the packet from \"),_c('code',{pre:true},[_vm._v(\"AckPending\")]),_vm._v(\" to\\n\"),_c('code',{pre:true},[_vm._v(\"AckReceived\")]),_vm._v(\". Evidence of this new finalized status should go back to\\n“Zone2”. Say that \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" has the following value:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"FromChainID\")]),_vm._v(\": “Hub”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"FromBlockHeight\")]),_vm._v(\": 301\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Packet\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Header\")]),_vm._v(\": an \"),_c('code',{pre:true},[_vm._v(\"IBCPacketHeader\")]),_vm._v(\":\\n\"),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"SrcChainID\")]),_vm._v(\": “Zone1”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"DstChainID\")]),_vm._v(\": “Zone2”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Number\")]),_vm._v(\": 200\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Status\")]),_vm._v(\": \"),_c('code',{pre:true},[_vm._v(\"AckReceived\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Type\")]),_vm._v(\": “coin”\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"MaxHeight\")]),_vm._v(\": 350\")])])]),_c('li',[_c('code',{pre:true},[_vm._v(\"PayloadHash\")]),_vm._v(\": <The hash bytes of the same “coin” payload>\")])])])]),_c('p',[_vm._v(\"Meanwhile, “Zone1” may optimistically assume successful delivery of a “coin”\\npacket unless evidence to the contrary is proven on “Hub”. In the example\\nabove, if “Hub” had not received an \"),_c('code',{pre:true},[_vm._v(\"AckSent\")]),_vm._v(\" status from “Zone2” by block\\n350, it would have set the status automatically to \"),_c('code',{pre:true},[_vm._v(\"Timeout\")]),_vm._v(\". This evidence of\\na timeout can get posted back on “Zone1”, and any tokens can be returned.\")]),_c('p',[_c('img',{attrs:{\"src\":\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack_timeout.png\",\"alt\":\"Figure of Zone1, Zone2, and Hub IBC with acknowledgement andtimeout\"}})]),_c('h3',{attrs:{\"id\":\"merkle-tree-proof-specification\"}},[_vm._v(\"Merkle Tree & Proof Specification\")]),_c('p',[_vm._v(\"There are two types of Merkle trees supported in the Tendermint/Cosmos\\necosystem: The Simple Tree, and the IAVL+ Tree.\")]),_c('h4',{attrs:{\"id\":\"simple-tree\"}},[_vm._v(\"Simple Tree\")]),_c('p',[_vm._v(\"The Simple Tree is a Merkle tree for a static list of elements. If the number\\nof items is not a power of two, some leaves will be at different levels. Simple\\nTree tries to keep both sides of the tree the same height, but the left may be\\none greater. This Merkle tree is used to Merkle-ize the transactions of a\\nblock, and the top level elements of the application state root.\")]),_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"v-pre\":\"\"}},[_vm._v(\"                *\\n               / \\\\\\n             /     \\\\\\n           /         \\\\\\n         /             \\\\\\n        *               *\\n       / \\\\             / \\\\\\n      /   \\\\           /   \\\\\\n     /     \\\\         /     \\\\\\n    *       *       *       h6\\n   / \\\\     / \\\\     / \\\\\\n  h0  h1  h2  h3  h4  h5\\n\\n  A SimpleTree with 7 elements\\n\")])]),_c('h4',{attrs:{\"id\":\"iavl-tree\"}},[_vm._v(\"IAVL+ Tree\")]),_c('p',[_vm._v(\"The purpose of the IAVL+ data structure is to provide persistent storage for\\nkey-value pairs in the application state such that a deterministic Merkle root\\nhash can be computed efficiently. The tree is balanced using a variant of the\\n\"),_c('a',{attrs:{\"href\":\"http://en.wikipedia.org/wiki/AVL_tree\"}},[_vm._v(\"AVL algorithm\")]),_vm._v(\", and all operations are\\nO(log(n)).\")]),_c('p',[_vm._v(\"In an AVL tree, the heights of the two child subtrees of any node differ by at\\nmost one. Whenever this condition is violated upon an update, the tree is\\nrebalanced by creating O(log(n)) new nodes that point to unmodified nodes of the\\nold tree. In the original AVL algorithm, inner nodes can also hold key-value\\npairs. The AVL+ algorithm (note the plus) modifies the AVL algorithm to keep\\nall values on leaf nodes, while only using branch-nodes to store keys. This\\nsimplifies the algorithm while keeping the merkle hash trail short.\")]),_c('p',[_vm._v(\"The AVL+ Tree is analogous to Ethereum’s \"),_c('a',{attrs:{\"href\":\"http://en.wikipedia.org/wiki/Radix_tree\"}},[_vm._v(\"Patricia\\ntries\")]),_vm._v(\". There are tradeoffs. Keys do\\nnot need to be hashed prior to insertion in IAVL+ trees, so this provides faster\\nordered iteration in the key space which may benefit some applications. The\\nlogic is simpler to implement, requiring only two types of nodes – inner nodes\\nand leaf nodes. The Merkle proof is on average shorter, being a balanced binary\\ntree. On the other hand, the Merkle root of an IAVL+ tree depends on the order\\nof updates.\")]),_c('p',[_vm._v(\"We will support additional efficient Merkle trees, such as Ethereum’s Patricia\\nTrie when the binary variant becomes available.\")]),_c('h3',{attrs:{\"id\":\"transaction-types\"}},[_vm._v(\"Transaction Types\")]),_c('p',[_vm._v(\"In the canonical implementation, transactions are streamed to the Cosmos hub\\napplication via the ABCI interface.\")]),_c('p',[_vm._v(\"The Cosmos Hub will accept a number of primary transaction types, including\\n\"),_c('code',{pre:true},[_vm._v(\"SendTx\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"BondTx\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"UnbondTx\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"ReportHackTx\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"SlashTx\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"BurnAtomTx\")]),_vm._v(\",\\n\"),_c('code',{pre:true},[_vm._v(\"ProposalCreateTx\")]),_vm._v(\", and \"),_c('code',{pre:true},[_vm._v(\"ProposalVoteTx\")]),_vm._v(\", which are fairly self-explanatory and\\nwill be documented in a future revision of this paper. Here we document the two\\nprimary transaction types for IBC: \"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommitTx\")]),_vm._v(\" and \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\".\")]),_c('h4',{attrs:{\"id\":\"ibcblockcommittx\"}},[_vm._v(\"IBCBlockCommitTx\")]),_c('p',[_vm._v(\"An \"),_c('code',{pre:true},[_vm._v(\"IBCBlockCommitTx\")]),_vm._v(\" transaction is composed of:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"ChainID (string)\")]),_vm._v(\": The ID of the blockchain\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"BlockHash ([]byte)\")]),_vm._v(\": The block-hash bytes, the Merkle root which includes the\\napp-hash\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"BlockPartsHeader (PartSetHeader)\")]),_vm._v(\": The block part-set header bytes, only\\nneeded to verify vote signatures\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"BlockHeight (int)\")]),_vm._v(\": The height of the commit\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"BlockRound (int)\")]),_vm._v(\": The round of the commit\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Commit ([]Vote)\")]),_vm._v(\": The >⅔ Tendermint \"),_c('code',{pre:true},[_vm._v(\"Precommit\")]),_vm._v(\" votes that comprise a block\\ncommit\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"ValidatorsHash ([]byte)\")]),_vm._v(\": A Merkle-tree root hash of the new validator set\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"ValidatorsHashProof (SimpleProof)\")]),_vm._v(\": A SimpleTree Merkle-proof for proving the\\n\"),_c('code',{pre:true},[_vm._v(\"ValidatorsHash\")]),_vm._v(\" against the \"),_c('code',{pre:true},[_vm._v(\"BlockHash\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"AppHash ([]byte)\")]),_vm._v(\": A IAVLTree Merkle-tree root hash of the application state\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"AppHashProof (SimpleProof)\")]),_vm._v(\": A SimpleTree Merkle-proof for proving the\\n\"),_c('code',{pre:true},[_vm._v(\"AppHash\")]),_vm._v(\" against the \"),_c('code',{pre:true},[_vm._v(\"BlockHash\")])])]),_c('h4',{attrs:{\"id\":\"ibcpackettx\"}},[_vm._v(\"IBCPacketTx\")]),_c('p',[_vm._v(\"An \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" is composed of:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"Header (IBCPacketHeader)\")]),_vm._v(\": The packet header\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Payload ([]byte)\")]),_vm._v(\": The bytes of the packet payload. \"),_c('em',[_vm._v(\"Optional\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"PayloadHash ([]byte)\")]),_vm._v(\": The hash for the bytes of the packet. \"),_c('em',[_vm._v(\"Optional\")])])]),_c('p',[_vm._v(\"Either one of \"),_c('code',{pre:true},[_vm._v(\"Payload\")]),_vm._v(\" or \"),_c('code',{pre:true},[_vm._v(\"PayloadHash\")]),_vm._v(\" must be present. The hash of an\\n\"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" is a simple Merkle root of the two items, \"),_c('code',{pre:true},[_vm._v(\"Header\")]),_vm._v(\" and \"),_c('code',{pre:true},[_vm._v(\"Payload\")]),_vm._v(\".\\nAn \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" without the full payload is called an \"),_c('em',[_vm._v(\"abbreviated packet\")]),_vm._v(\".\")]),_c('p',[_vm._v(\"An \"),_c('code',{pre:true},[_vm._v(\"IBCPacketHeader\")]),_vm._v(\" is composed of:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"SrcChainID (string)\")]),_vm._v(\": The source blockchain ID\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"DstChainID (string)\")]),_vm._v(\": The destination blockchain ID\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Number (int)\")]),_vm._v(\": A unique number for all packets\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Status (enum)\")]),_vm._v(\": Can be one of \"),_c('code',{pre:true},[_vm._v(\"AckPending\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"AckSent\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"AckReceived\")]),_vm._v(\",\\n\"),_c('code',{pre:true},[_vm._v(\"NoAck\")]),_vm._v(\", or \"),_c('code',{pre:true},[_vm._v(\"Timeout\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"Type (string)\")]),_vm._v(\": The types are application-dependent. Cosmos reserves the\\n“coin” packet type\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"MaxHeight (int)\")]),_vm._v(\": If status is not \"),_c('code',{pre:true},[_vm._v(\"NoAckWanted\")]),_vm._v(\" or \"),_c('code',{pre:true},[_vm._v(\"AckReceived\")]),_vm._v(\" by this\\nheight, status becomes \"),_c('code',{pre:true},[_vm._v(\"Timeout\")]),_vm._v(\". \"),_c('em',[_vm._v(\"Optional\")])])]),_c('p',[_vm._v(\"An \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" transaction is composed of:\")]),_c('ul',[_c('li',[_c('code',{pre:true},[_vm._v(\"FromChainID (string)\")]),_vm._v(\": The ID of the blockchain which is providing this\\npacket; not necessarily the source\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"FromBlockHeight (int)\")]),_vm._v(\": The blockchain height in which the following packet\\nis included (Merkle-ized) in the block-hash of the source chain\")]),_c('li',[_c('code',{pre:true},[_vm._v(\"Packet (IBCPacket)\")]),_vm._v(\": A packet of data, whose status may be one of\\n\"),_c('code',{pre:true},[_vm._v(\"AckPending\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"AckSent\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"AckReceived\")]),_vm._v(\", \"),_c('code',{pre:true},[_vm._v(\"NoAck\")]),_vm._v(\", or \"),_c('code',{pre:true},[_vm._v(\"Timeout\")])]),_c('li',[_c('code',{pre:true},[_vm._v(\"PacketProof (IAVLProof)\")]),_vm._v(\": A IAVLTree Merkle-proof for proving the packet’s\\nhash against the \"),_c('code',{pre:true},[_vm._v(\"AppHash\")]),_vm._v(\" of the source chain at given height\")])]),_c('p',[_vm._v(\"The sequence for sending a packet from “Zone1” to “Zone2” through the\\n“Hub” is depicted in {Figure X}. First, an \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" proves to\\n“Hub” that the packet is included in the app-state of “Zone1”. Then,\\nanother \"),_c('code',{pre:true},[_vm._v(\"IBCPacketTx\")]),_vm._v(\" proves to “Zone2” that the packet is included in the\\napp-state of “Hub”. During this procedure, the \"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" fields are\\nidentical: the \"),_c('code',{pre:true},[_vm._v(\"SrcChainID\")]),_vm._v(\" is always “Zone1”, and the \"),_c('code',{pre:true},[_vm._v(\"DstChainID\")]),_vm._v(\" is always\\n“Zone2”.\")]),_c('p',[_vm._v(\"The \"),_c('code',{pre:true},[_vm._v(\"PacketProof\")]),_vm._v(\" must have the correct Merkle-proof path, as follows:\")]),_c('pre',{pre:true},[_c('code',{pre:true,attrs:{\"v-pre\":\"\"}},[_vm._v(\"IBC/<SrcChainID>/<DstChainID>/<Number>\\n\")])]),_c('p',[_vm._v(\"When “Zone1” wants to send a packet to “Zone2” through “Hub”, the\\n\"),_c('code',{pre:true},[_vm._v(\"IBCPacket\")]),_vm._v(\" data are identical whether the packet is Merkle-ized on “Zone1”,\\nthe “Hub”, or “Zone2”. The only mutable field is \"),_c('code',{pre:true},[_vm._v(\"Status\")]),_vm._v(\" for tracking\\ndelivery.\")]),_c('h2',{attrs:{\"id\":\"acknowledgements\"}},[_vm._v(\"Acknowledgements\")]),_c('p',[_vm._v(\"We thank our friends and peers for assistance in conceptualizing, reviewing, and\\nproviding support for our work with Tendermint and Cosmos.\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/zmanian\"}},[_vm._v(\"Zaki Manian\")]),_vm._v(\" of\\n\"),_c('a',{attrs:{\"href\":\"https://www.skuchain.com/\"}},[_vm._v(\"SkuChain\")]),_vm._v(\" provided much help in formatting and\\nwording, especially under the ABCI section\")]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/jtremback\"}},[_vm._v(\"Jehan Tremback\")]),_vm._v(\" of Althea and Dustin Byington\\nfor helping with initial iterations\")]),_c('li',[_c('a',{attrs:{\"href\":\"http://soc1024.com/\"}},[_vm._v(\"Andrew Miller\")]),_vm._v(\" of \"),_c('a',{attrs:{\"href\":\"https://eprint.iacr.org/2016/199\"}},[_vm._v(\"Honey\\nBadger\")]),_vm._v(\" for feedback on consensus\")]),_c('li',[_c('a',{attrs:{\"href\":\"https://fixingtao.com/\"}},[_vm._v(\"Greg Slepak\")]),_vm._v(\" for feedback on consensus and wording\")]),_c('li',[_vm._v(\"Also thanks to \"),_c('a',{attrs:{\"href\":\"https://github.com/gleim\"}},[_vm._v(\"Bill Gleim\")]),_vm._v(\" and \"),_c('a',{attrs:{\"href\":\"http://www.seunghwanhan.com\"}},[_vm._v(\"Seunghwan\\nHan\")]),_vm._v(\" for various contributions.\")]),_c('li',[_c('strong',[_vm._v(\"Your name and organization here for your contribution\")])])]),_c('h2',{attrs:{\"id\":\"citations\"}},[_vm._v(\"Citations\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://bitcoin.org/bitcoin.pdf\"}},[_vm._v(\"1\")]),_vm._v(\" Bitcoin: \"),_c('a',{attrs:{\"href\":\"https://bitcoin.org/bitcoin.pdf\"}},[_vm._v(\"https://bitcoin.org/bitcoin.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"http://zerocash-project.org/paper\"}},[_vm._v(\"2\")]),_vm._v(\" ZeroCash: \"),_c('a',{attrs:{\"href\":\"http://zerocash-project.org/paper\"}},[_vm._v(\"http://zerocash-project.org/paper\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/ethereum/wiki/wiki/White-Paper\"}},[_vm._v(\"3\")]),_vm._v(\" Ethereum: \"),_c('a',{attrs:{\"href\":\"https://github.com/ethereum/wiki/wiki/White-Paper\"}},[_vm._v(\"https://github.com/ethereum/wiki/wiki/White-Paper\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://download.slock.it/public/DAO/WhitePaper.pdf\"}},[_vm._v(\"4\")]),_vm._v(\" TheDAO: \"),_c('a',{attrs:{\"href\":\"https://download.slock.it/public/DAO/WhitePaper.pdf\"}},[_vm._v(\"https://download.slock.it/public/DAO/WhitePaper.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\"}},[_vm._v(\"5\")]),_vm._v(\" Segregated Witness: \"),_c('a',{attrs:{\"href\":\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\"}},[_vm._v(\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://arxiv.org/pdf/1510.02037v2.pdf\"}},[_vm._v(\"6\")]),_vm._v(\" BitcoinNG: \"),_c('a',{attrs:{\"href\":\"https://arxiv.org/pdf/1510.02037v2.pdf\"}},[_vm._v(\"https://arxiv.org/pdf/1510.02037v2.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\"}},[_vm._v(\"7\")]),_vm._v(\" Lightning Network: \"),_c('a',{attrs:{\"href\":\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\"}},[_vm._v(\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/tendermint/tendermint/wiki\"}},[_vm._v(\"8\")]),_vm._v(\" Tendermint: \"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/tendermint/wiki\"}},[_vm._v(\"https://github.com/tendermint/tendermint/wiki\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\"}},[_vm._v(\"9\")]),_vm._v(\" FLP Impossibility: \"),_c('a',{attrs:{\"href\":\"https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\"}},[_vm._v(\"https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\"}},[_vm._v(\"10\")]),_vm._v(\" Slasher: \"),_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\"}},[_vm._v(\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\")])]),_c('li',[_c('a',{attrs:{\"href\":\"http://pmg.csail.mit.edu/papers/osdi99.pdf\"}},[_vm._v(\"11\")]),_vm._v(\" PBFT: \"),_c('a',{attrs:{\"href\":\"http://pmg.csail.mit.edu/papers/osdi99.pdf\"}},[_vm._v(\"http://pmg.csail.mit.edu/papers/osdi99.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\"}},[_vm._v(\"12\")]),_vm._v(\" BitShares: \"),_c('a',{attrs:{\"href\":\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\"}},[_vm._v(\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\"}},[_vm._v(\"13\")]),_vm._v(\" Stellar: \"),_c('a',{attrs:{\"href\":\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\"}},[_vm._v(\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://interledger.org/rfcs/0001-interledger-architecture/\"}},[_vm._v(\"14\")]),_vm._v(\" Interledger: \"),_c('a',{attrs:{\"href\":\"https://interledger.org/rfcs/0001-interledger-architecture/\"}},[_vm._v(\"https://interledger.org/rfcs/0001-interledger-architecture/\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://blockstream.com/sidechains.pdf\"}},[_vm._v(\"15\")]),_vm._v(\" Sidechains: \"),_c('a',{attrs:{\"href\":\"https://blockstream.com/sidechains.pdf\"}},[_vm._v(\"https://blockstream.com/sidechains.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\"}},[_vm._v(\"16\")]),_vm._v(\" Casper: \"),_c('a',{attrs:{\"href\":\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\"}},[_vm._v(\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/tendermint/abci\"}},[_vm._v(\"17\")]),_vm._v(\" ABCI: \"),_c('a',{attrs:{\"href\":\"https://github.com/tendermint/abci\"}},[_vm._v(\"https://github.com/tendermint/abci\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/ethereum/EIPs/issues/53\"}},[_vm._v(\"18\")]),_vm._v(\" Ethereum Sharding: \"),_c('a',{attrs:{\"href\":\"https://github.com/ethereum/EIPs/issues/53\"}},[_vm._v(\"https://github.com/ethereum/EIPs/issues/53\")])]),_c('li',[_c('a',{attrs:{\"href\":\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\"}},[_vm._v(\"19\")]),_vm._v(\" LibSwift: \"),_c('a',{attrs:{\"href\":\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\"}},[_vm._v(\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\"}},[_vm._v(\"20\")]),_vm._v(\" DLS: \"),_c('a',{attrs:{\"href\":\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\"}},[_vm._v(\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://en.bitcoin.it/wiki/Thin_Client_Security\"}},[_vm._v(\"21\")]),_vm._v(\" Thin Client Security: \"),_c('a',{attrs:{\"href\":\"https://en.bitcoin.it/wiki/Thin_Client_Security\"}},[_vm._v(\"https://en.bitcoin.it/wiki/Thin_Client_Security\")])]),_c('li',[_c('a',{attrs:{\"href\":\"http://vitalik.ca/files/mauve_paper.html\"}},[_vm._v(\"22\")]),_vm._v(\" Ethereum 2.0 Mauve Paper: \"),_c('a',{attrs:{\"href\":\"http://vitalik.ca/files/mauve_paper.html\"}},[_vm._v(\"http://vitalik.ca/files/mauve_paper.html\")])])]),_c('h4',{attrs:{\"id\":\"unsorted-links\"}},[_vm._v(\"Unsorted links\")]),_c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html\"}},[_vm._v(\"https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html\")])])])])}]\n\nexport { render, staticRenderFns }"]}