{"remainingRequest":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\cosmos\\node_modules\\@cosmos-ui\\vue\\src\\SectionSearch\\SectionSearch.vue?vue&type=style&index=0&id=464fe1e6&scoped=true&lang=css&","dependencies":[{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\@cosmos-ui\\vue\\src\\SectionSearch\\SectionSearch.vue","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstrong {\n  font-weight: 500;\n}\n.container {\n  height: 100vh;\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  flex-direction: column;\n  background-color: #f8f9fc;\n  font-family: var(--ds-font-family);\n}\n.results {\n  padding-bottom: 3rem;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n}\n",{"version":3,"sources":["SectionSearch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SectionSearch.vue","sourceRoot":"node_modules/@cosmos-ui/vue/src/SectionSearch","sourcesContent":["<template>\n  <div>\n    <div class=\"container\">\n      <section-input\n        :value=\"query\"\n        @input=\"querySet($event)\"\n        @keypress=\"inputKeypress\"\n        @cancel=\"$emit('cancel', false)\"\n      />\n      <div class=\"results\">\n        <section-results-list\n          v-if=\"query && resultsAvailable\"\n          @activate=\"$emit('select', $event)\"\n          :selected=\"selectedIndex\"\n          :value=\"results\"\n          :base=\"base\"\n        />\n        <section-shortcuts v-else-if=\"!query\"/>\n        <section-results-empty\n          v-else-if=\"query && !resultsAvailable && !searchInFlight\"\n          @query=\"querySet($event)\"\n          :query=\"query\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\nstrong {\n  font-weight: 500;\n}\n.container {\n  height: 100vh;\n  overflow-y: scroll;\n  -webkit-overflow-scrolling: touch;\n  flex-direction: column;\n  background-color: #f8f9fc;\n  font-family: var(--ds-font-family);\n}\n.results {\n  padding-bottom: 3rem;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n}\n</style>\n\n<script>\nimport Fuse from \"fuse.js\";\nimport MarkdownIt from \"markdown-it\";\nimport hotkeys from \"hotkeys-js\";\nimport SectionShortcuts from \"./SectionShortcuts.vue\";\nimport SectionResultsEmpty from \"./SectionResultsEmpty.vue\";\nimport SectionInput from \"./SectionInput.vue\";\nimport SectionResultsList from \"./SectionResultsList.vue\";\nimport algoliasearch from \"algoliasearch\";\n\nconst algoliaInit = config => {\n  if (config && config.id && config.key && config.index) {\n    const algoliaClient = algoliasearch(config.id, config.key);\n    const algolia = algoliaClient.initIndex(config.index);\n    return algolia;\n  } else {\n    return false;\n  }\n};\n\nconst fuseInit = site => {\n  return new Fuse(\n    site.pages\n      .map(doc => {\n        return {\n          key: doc.key,\n          title: doc.title,\n          headers: doc.headers && doc.headers.map(h => h.title).join(\" \"),\n          description: doc.frontmatter.description,\n          path: doc.path\n        };\n      })\n      .filter(doc => {\n        return !(\n          Object.keys(site.locales || {}).indexOf(doc.path.split(\"/\")[1]) > -1\n        );\n      }),\n    {\n      keys: [\"title\", \"headers\", \"description\", \"path\"],\n      shouldSort: true,\n      includeScore: true,\n      includeMatches: true\n    }\n  );\n};\n\nconst fuseFormat = results => {\n  return results.map(result => {\n    return {\n      title: result.item && result.item.title && md(result.item.title),\n      desc:\n        result.item && result.item.description && md(result.item.description),\n      id: result.item && result.item.key\n    };\n  });\n};\n\nconst algoliaFormat = results => {\n  return results.map(result => {\n    const title = Object.values(result.hierarchy)\n      .filter(e => e)\n      .map(e => e.replace(/^#/, \"\"))\n      .join(\" â€º \");\n    return {\n      title,\n      desc: result.content,\n      url: result.url\n    };\n  });\n};\n\nconst md = string => {\n  const md = new MarkdownIt({ html: true, linkify: true });\n  return `<div>${md.renderInline(string)}</div>`;\n};\n\nexport default {\n  props: {\n    query: {\n      type: String\n    },\n    site: {\n      type: Object\n    },\n    algoliaConfig: {\n      type: Object\n    },\n    base: {\n      default: \"/master/\"\n    }\n  },\n  components: {\n    SectionInput,\n    SectionShortcuts,\n    SectionResultsEmpty,\n    SectionResultsList\n  },\n  data: function() {\n    return {\n      results: null,\n      fuse: null,\n      algolia: null,\n      selectedIndex: null,\n      searchInFlight: null\n    };\n  },\n  watch: {\n    query() {\n      this.search(this.query);\n    }\n  },\n  computed: {\n    resultsAvailable() {\n      return this.results && this.results.length > 0;\n    }\n  },\n  mounted() {\n    hotkeys(\"down\", e => {\n      this.inputKeypress(e);\n      e.preventDefault();\n    });\n    hotkeys(\"up\", e => {\n      this.inputKeypress(e);\n      e.preventDefault();\n    });\n    hotkeys(\"enter\", e => {\n      this.inputKeypress(e);\n      e.preventDefault();\n    });\n    this.algolia = algoliaInit(this.algoliaConfig);\n    this.fuse = fuseInit(this.site);\n    this.search(this.query);\n  },\n  methods: {\n    querySet(string) {\n      this.$emit(\"query\", string);\n    },\n    inputKeypress(e) {\n      if (e.key) {\n        if (e.key === \"ArrowUp\") this.selectResult(-1);\n        if (e.key === \"ArrowDown\") this.selectResult(+1);\n        if (e.key === \"Enter\") {\n          this.$emit(\"select\", { ...this.results[this.selectedIndex] });\n        }\n      }\n    },\n    selectResult(delta) {\n      const index = this.selectedIndex,\n        indexNew = index + delta,\n        isValidIndex = Number.isInteger(index) && index >= 0;\n      if (isValidIndex) {\n        this.selectedIndex = indexNew >= 0 ? indexNew : 0;\n      } else {\n        this.selectedIndex = 0;\n      }\n    },\n    async search(query) {\n      this.searchInFlight = true;\n      if (!query) return;\n      if (this.algolia) {\n        const params = { hitsPerPage: 100 };\n        const results = (await this.algolia.search(query, params)).hits;\n        this.results = algoliaFormat(results);\n        this.searchInFlight = false;\n      } else {\n        this.results = fuseFormat(this.fuse.search(query));\n      }\n    }\n  }\n};\n</script>"]}]}