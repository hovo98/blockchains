{"remainingRequest":"C:\\xampp\\htdocs\\cosmos\\node_modules\\thread-loader\\dist\\cjs.js!C:\\xampp\\htdocs\\cosmos\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\cosmos\\src\\views\\Api.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\cosmos\\src\\views\\Api.vue","mtime":1644920968000},{"path":"C:\\xampp\\htdocs\\cosmos\\babel.config.js","mtime":1644920968000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/xampp/htdocs/cosmos/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SwaggerUI from \"swagger-ui\";\nimport \"swagger-ui/dist/swagger-ui.css\";\nimport versionList from \"@/swagger.json\";\nimport { find } from \"lodash\";\nimport axios from \"axios\";\nimport YAML from \"yamljs\";\nexport default {\n  props: [\"version\"],\n  mounted: function mounted() {\n    this.swaggerInit(this.version);\n  },\n  watch: {\n    version: {\n      handler: function handler(newVersion) {\n        this.swaggerInit(newVersion);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      versionList: versionList,\n      spec: null,\n      host: null\n    };\n  },\n  methods: {\n    swaggerInit: function () {\n      var _swaggerInit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(v, host) {\n        var version, yaml, spec, dom_id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                version = find(versionList, [\"key\", v]);\n                _context.next = 3;\n                return axios.get(version.url);\n\n              case 3:\n                yaml = _context.sent.data;\n                spec = YAML.parse(yaml);\n                spec.schemes = [\"https\", \"http\"];\n                dom_id = \"#swagger\";\n\n                if (host) {\n                  spec.host = host;\n                } else spec.host = \"api.cosmos.network\";\n\n                this.host = spec.host;\n\n                if (version) {\n                  this.spec = SwaggerUI({\n                    dom_id: dom_id,\n                    spec: spec\n                  });\n                } else {\n                  this.versionChange(\"\");\n                }\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function swaggerInit(_x, _x2) {\n        return _swaggerInit.apply(this, arguments);\n      }\n\n      return swaggerInit;\n    }(),\n    versionChange: function versionChange(ver) {\n      this.$router.push(\"/rpc/\".concat(ver));\n    },\n    hostChange: function hostChange() {\n      this.swaggerInit(this.version, this.host);\n    }\n  }\n};",{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,gCAAP;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe;AACbC,OAAK,EAAE,CAAC,SAAD,CADM;AAEbC,SAFa,qBAEH;AACR,SAAKC,WAAL,CAAiB,KAAKC,OAAtB;AACD,GAJY;AAKbC,OAAK,EAAE;AACLD,WAAO,EAAE;AACPE,aAAO,EAAE,iBAASC,UAAT,EAAqB;AAC5B,aAAKJ,WAAL,CAAiBI,UAAjB;AACD;AAHM;AADJ,GALM;AAYbC,MAAI,EAAE,gBAAW;AACf,WAAO;AACLX,iBAAW,EAAXA,WADK;AAELY,UAAI,EAAE,IAFD;AAGLC,UAAI,EAAE;AAHD,KAAP;AAKD,GAlBY;AAmBbC,SAAO,EAAE;AACDR,eADC;AAAA,kGACWS,CADX,EACcF,IADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAECN,uBAFD,GAEWN,IAAI,CAACD,WAAD,EAAc,CAAC,KAAD,EAAQe,CAAR,CAAd,CAFf;AAAA;AAAA,uBAGeb,KAAK,CAACc,GAAN,CAAUT,OAAO,CAACU,GAAlB,CAHf;;AAAA;AAGCC,oBAHD,iBAGuCP,IAHvC;AAICC,oBAJD,GAIQT,IAAI,CAACgB,KAAL,CAAWD,IAAX,CAJR;AAKLN,oBAAI,CAACQ,OAAL,GAAe,CAAC,OAAD,EAAU,MAAV,CAAf;AACMC,sBAND,GAMU,UANV;;AAOL,oBAAIR,IAAJ,EAAU;AACRD,sBAAI,CAACC,IAAL,GAAYA,IAAZ;AACD,iBAFD,MAEOD,IAAI,CAACC,IAAL,GAAY,oBAAZ;;AACP,qBAAKA,IAAL,GAAYD,IAAI,CAACC,IAAjB;;AACA,oBAAIN,OAAJ,EAAa;AACX,uBAAKK,IAAL,GAAYb,SAAS,CAAC;AAAEsB,0BAAM,EAANA,MAAF;AAAUT,wBAAI,EAAJA;AAAV,mBAAD,CAArB;AACD,iBAFD,MAEO;AACL,uBAAKU,aAAL,CAAmB,EAAnB;AACD;;AAfI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiBPA,iBAjBO,yBAiBOC,GAjBP,EAiBY;AACjB,WAAKC,OAAL,CAAaC,IAAb,gBAA0BF,GAA1B;AACD,KAnBM;AAoBPG,cApBO,wBAoBM;AACX,WAAKpB,WAAL,CAAiB,KAAKC,OAAtB,EAA+B,KAAKM,IAApC;AACD;AAtBM;AAnBI,CAAf","names":["SwaggerUI","versionList","find","axios","YAML","props","mounted","swaggerInit","version","watch","handler","newVersion","data","spec","host","methods","v","get","url","yaml","parse","schemes","dom_id","versionChange","ver","$router","push","hostChange"],"sourceRoot":"src/views","sources":["C:/xampp/htdocs/cosmos/src/views/Api.vue"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SwaggerUI from \"swagger-ui\"\nimport \"swagger-ui/dist/swagger-ui.css\"\nimport versionList from \"@/swagger.json\"\nimport { find } from \"lodash\"\nimport axios from \"axios\"\nimport YAML from \"yamljs\"\n\nexport default {\n  props: [\"version\"],\n  mounted() {\n    this.swaggerInit(this.version)\n  },\n  watch: {\n    version: {\n      handler: function(newVersion) {\n        this.swaggerInit(newVersion)\n      }\n    }\n  },\n  data: function() {\n    return {\n      versionList,\n      spec: null,\n      host: null\n    }\n  },\n  methods: {\n    async swaggerInit(v, host) {\n      const version = find(versionList, [\"key\", v])\n      const yaml = (await axios.get(version.url)).data\n      const spec = YAML.parse(yaml)\n      spec.schemes = [\"https\", \"http\"]\n      const dom_id = \"#swagger\"\n      if (host) {\n        spec.host = host\n      } else spec.host = \"api.cosmos.network\"\n      this.host = spec.host\n      if (version) {\n        this.spec = SwaggerUI({ dom_id, spec })\n      } else {\n        this.versionChange(\"\")\n      }\n    },\n    versionChange(ver) {\n      this.$router.push(`/rpc/${ver}`)\n    },\n    hostChange() {\n      this.swaggerInit(this.version, this.host)\n    }\n  }\n}\n"]}]}