{"remainingRequest":"C:\\xampp\\htdocs\\cosmos\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\cosmos\\src\\components\\common\\TmField.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\cosmos\\src\\components\\common\\TmField.vue","mtime":1644920968000},{"path":"C:\\xampp\\htdocs\\cosmos\\babel.config.js","mtime":1644920968000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\cosmos\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import flatpickr from 'flatpickr'\n// import countries from \"./countries.json\"\nexport default {\n  name: \"tm-field\",\n  props: [\"placeholder\", \"type\", \"size\", \"value\", \"theme\", \"options\", \"change\", \"keyup\", \"keydown\", \"max\", \"min\"],\n  computed: {\n    css: function css() {\n      var value = \"tm-field\";\n\n      if (this.type === \"select\" || this.type === \"countries\") {\n        value += \" tm-field-select\";\n      }\n\n      if (this.type === \"toggle\") {\n        value += \" tm-field-toggle\";\n      }\n\n      if (this.size) value += \" tm-field-size-\".concat(this.size);\n      if (this.theme) value += \" tm-field-theme-\".concat(this.theme);\n      return value;\n    },\n    toggleClass: function toggleClass() {\n      return {\n        unchecked: !this.value\n      };\n    },\n    toggleLongerWord: function toggleLongerWord() {\n      return this.toggleOptions.checked.length > this.toggleOptions.unchecked.length ? this.toggleOptions.checked : this.toggleOptions.unchecked;\n    },\n    selectPlaceholder: function selectPlaceholder() {\n      if (this.placeholder) return this.placeholder;else return \"Select option...\";\n    },\n    toggleOptions: function toggleOptions() {\n      if (this.options && this.options.checked && this.options.unchecked) return this.options;\n      return {\n        checked: \"on\",\n        unchecked: \"off\"\n      };\n    }\n  },\n  data: function data() {\n    return {// countries: countries\n    };\n  },\n  methods: {\n    toggle: function toggle() {\n      this.value = !this.value;\n    },\n    updateValue: function updateValue(value) {\n      var formattedValue = this.forceMinMax(value); // so that the user can type in \"-\" and it isn't removed\n\n      if (formattedValue && this.$refs.numTextInput) {\n        // so the actual text box displays the correct number\n        this.$refs.numTextInput.value = formattedValue;\n      } // Emit the number value through the input event\n\n\n      this.$emit(\"input\", formattedValue);\n    },\n    onChange: function onChange() {\n      if (this.change) return this.change.apply(this, arguments);\n    },\n    onKeyup: function onKeyup() {\n      if (this.keyup) return this.keyup.apply(this, arguments);\n    },\n    onKeydown: function onKeydown() {\n      if (this.keydown) return this.keydown.apply(this, arguments);\n    },\n    forceMinMax: function forceMinMax(value) {\n      if (this.type !== \"number\") return value;\n      value = value ? Number(value.trim()) : value;\n\n      if (this.max && value > this.max) {\n        value = Number(this.max);\n      } else if (this.min && value && value < this.min) {\n        value = Number(this.min);\n      }\n\n      return value;\n    }\n  },\n  mounted: function mounted() {\n    var el = this.$el;\n\n    if (this.type === \"number\") {\n      el.addEventListener(\"focus\", function () {\n        el.select();\n      });\n    }\n    /* if (this.type === 'datetime') {\n      this.picker = flatpickr(el, {\n        enableTime: true,\n        dateFormat: 'Y-m-d H:i',\n        onChange: (dateObj, dateStr) => this.updateValue(dateStr)\n      })\n      // console.log('its a datetime!', el)\n    } */\n\n  }\n};",{"version":3,"mappings":"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","names":["name","props","computed","css","value","type","size","theme","toggleClass","unchecked","toggleLongerWord","toggleOptions","checked","length","selectPlaceholder","placeholder","options","data","methods","toggle","updateValue","formattedValue","forceMinMax","$refs","numTextInput","$emit","onChange","change","onKeyup","keyup","onKeydown","keydown","Number","trim","max","min","mounted","el","$el","addEventListener","select"],"sourceRoot":"src/components/common","sources":["C:/xampp/htdocs/cosmos/src/components/common/TmField.vue"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import flatpickr from 'flatpickr'\n// import countries from \"./countries.json\"\nexport default {\n  name: \"tm-field\",\n  props: [\n    \"placeholder\",\n    \"type\",\n    \"size\",\n    \"value\",\n    \"theme\",\n    \"options\",\n    \"change\",\n    \"keyup\",\n    \"keydown\",\n    \"max\",\n    \"min\"\n  ],\n  computed: {\n    css() {\n      let value = \"tm-field\"\n      if (this.type === \"select\" || this.type === \"countries\") {\n        value += \" tm-field-select\"\n      }\n      if (this.type === \"toggle\") {\n        value += \" tm-field-toggle\"\n      }\n      if (this.size) value += ` tm-field-size-${this.size}`\n      if (this.theme) value += ` tm-field-theme-${this.theme}`\n      return value\n    },\n    toggleClass() {\n      return {\n        unchecked: !this.value\n      }\n    },\n    toggleLongerWord() {\n      return this.toggleOptions.checked.length >\n        this.toggleOptions.unchecked.length\n        ? this.toggleOptions.checked\n        : this.toggleOptions.unchecked\n    },\n    selectPlaceholder() {\n      if (this.placeholder) return this.placeholder\n      else return \"Select option...\"\n    },\n    toggleOptions() {\n      if (this.options && this.options.checked && this.options.unchecked)\n        return this.options\n      return {\n        checked: \"on\",\n        unchecked: \"off\"\n      }\n    }\n  },\n  data: () => ({\n    // countries: countries\n  }),\n  methods: {\n    toggle() {\n      this.value = !this.value\n    },\n    updateValue(value) {\n      let formattedValue = this.forceMinMax(value)\n      // so that the user can type in \"-\" and it isn't removed\n      if (formattedValue && this.$refs.numTextInput) {\n        // so the actual text box displays the correct number\n        this.$refs.numTextInput.value = formattedValue\n      }\n      // Emit the number value through the input event\n      this.$emit(\"input\", formattedValue)\n    },\n    onChange(...args) {\n      if (this.change) return this.change(...args)\n    },\n    onKeyup(...args) {\n      if (this.keyup) return this.keyup(...args)\n    },\n    onKeydown(...args) {\n      if (this.keydown) return this.keydown(...args)\n    },\n    forceMinMax(value) {\n      if (this.type !== \"number\") return value\n      value = value ? Number(value.trim()) : value\n      if (this.max && value > this.max) {\n        value = Number(this.max)\n      } else if (this.min && value && value < this.min) {\n        value = Number(this.min)\n      }\n      return value\n    }\n  },\n  mounted() {\n    let el = this.$el\n    if (this.type === \"number\") {\n      el.addEventListener(\"focus\", function() {\n        el.select()\n      })\n    }\n    /* if (this.type === 'datetime') {\n      this.picker = flatpickr(el, {\n        enableTime: true,\n        dateFormat: 'Y-m-d H:i',\n        onChange: (dateObj, dateStr) => this.updateValue(dateStr)\n      })\n      // console.log('its a datetime!', el)\n    } */\n  }\n}\n"]}]}